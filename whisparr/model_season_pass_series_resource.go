/*
Whisparr

Whisparr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// SeasonPassSeriesResource struct for SeasonPassSeriesResource
type SeasonPassSeriesResource struct {
	Id *int32 `json:"id,omitempty"`
	Monitored NullableBool `json:"monitored,omitempty"`
	Seasons []*SeasonResource `json:"seasons,omitempty"`
}

// NewSeasonPassSeriesResource instantiates a new SeasonPassSeriesResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeasonPassSeriesResource() *SeasonPassSeriesResource {
	this := SeasonPassSeriesResource{}
	return &this
}

// NewSeasonPassSeriesResourceWithDefaults instantiates a new SeasonPassSeriesResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeasonPassSeriesResourceWithDefaults() *SeasonPassSeriesResource {
	this := SeasonPassSeriesResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SeasonPassSeriesResource) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeasonPassSeriesResource) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SeasonPassSeriesResource) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SeasonPassSeriesResource) SetId(v int32) {
	o.Id = &v
}

// GetMonitored returns the Monitored field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SeasonPassSeriesResource) GetMonitored() bool {
	if o == nil || isNil(o.Monitored.Get()) {
		var ret bool
		return ret
	}
	return *o.Monitored.Get()
}

// GetMonitoredOk returns a tuple with the Monitored field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SeasonPassSeriesResource) GetMonitoredOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.Monitored.Get(), o.Monitored.IsSet()
}

// HasMonitored returns a boolean if a field has been set.
func (o *SeasonPassSeriesResource) HasMonitored() bool {
	if o != nil && o.Monitored.IsSet() {
		return true
	}

	return false
}

// SetMonitored gets a reference to the given NullableBool and assigns it to the Monitored field.
func (o *SeasonPassSeriesResource) SetMonitored(v bool) {
	o.Monitored.Set(&v)
}
// SetMonitoredNil sets the value for Monitored to be an explicit nil
func (o *SeasonPassSeriesResource) SetMonitoredNil() {
	o.Monitored.Set(nil)
}

// UnsetMonitored ensures that no value is present for Monitored, not even an explicit nil
func (o *SeasonPassSeriesResource) UnsetMonitored() {
	o.Monitored.Unset()
}

// GetSeasons returns the Seasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SeasonPassSeriesResource) GetSeasons() []*SeasonResource {
	if o == nil {
		var ret []*SeasonResource
		return ret
	}
	return o.Seasons
}

// GetSeasonsOk returns a tuple with the Seasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SeasonPassSeriesResource) GetSeasonsOk() ([]*SeasonResource, bool) {
	if o == nil || isNil(o.Seasons) {
    return nil, false
	}
	return o.Seasons, true
}

// HasSeasons returns a boolean if a field has been set.
func (o *SeasonPassSeriesResource) HasSeasons() bool {
	if o != nil && isNil(o.Seasons) {
		return true
	}

	return false
}

// SetSeasons gets a reference to the given []SeasonResource and assigns it to the Seasons field.
func (o *SeasonPassSeriesResource) SetSeasons(v []*SeasonResource) {
	o.Seasons = v
}

func (o SeasonPassSeriesResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Monitored.IsSet() {
		toSerialize["monitored"] = o.Monitored.Get()
	}
	if o.Seasons != nil {
		toSerialize["seasons"] = o.Seasons
	}
	return json.Marshal(toSerialize)
}

type NullableSeasonPassSeriesResource struct {
	value *SeasonPassSeriesResource
	isSet bool
}

func (v NullableSeasonPassSeriesResource) Get() *SeasonPassSeriesResource {
	return v.value
}

func (v *NullableSeasonPassSeriesResource) Set(val *SeasonPassSeriesResource) {
	v.value = val
	v.isSet = true
}

func (v NullableSeasonPassSeriesResource) IsSet() bool {
	return v.isSet
}

func (v *NullableSeasonPassSeriesResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeasonPassSeriesResource(val *SeasonPassSeriesResource) *NullableSeasonPassSeriesResource {
	return &NullableSeasonPassSeriesResource{value: val, isSet: true}
}

func (v NullableSeasonPassSeriesResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeasonPassSeriesResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


