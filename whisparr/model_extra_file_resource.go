/*
Radarr

Radarr API docs

API version: b08981dee068e1ed23e4f45a0d8fe70ef7bf7703
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// checks if the ExtraFileResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtraFileResource{}

// ExtraFileResource struct for ExtraFileResource
type ExtraFileResource struct {
	Id *int32 `json:"id,omitempty"`
	MovieId *int32 `json:"movieId,omitempty"`
	MovieFileId NullableInt32 `json:"movieFileId,omitempty"`
	RelativePath NullableString `json:"relativePath,omitempty"`
	Extension NullableString `json:"extension,omitempty"`
	Type *ExtraFileType `json:"type,omitempty"`
}

// NewExtraFileResource instantiates a new ExtraFileResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtraFileResource() *ExtraFileResource {
	this := ExtraFileResource{}
	return &this
}

// NewExtraFileResourceWithDefaults instantiates a new ExtraFileResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtraFileResourceWithDefaults() *ExtraFileResource {
	this := ExtraFileResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExtraFileResource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtraFileResource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExtraFileResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ExtraFileResource) SetId(v int32) {
	o.Id = &v
}

// GetMovieId returns the MovieId field value if set, zero value otherwise.
func (o *ExtraFileResource) GetMovieId() int32 {
	if o == nil || IsNil(o.MovieId) {
		var ret int32
		return ret
	}
	return *o.MovieId
}

// GetMovieIdOk returns a tuple with the MovieId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtraFileResource) GetMovieIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MovieId) {
		return nil, false
	}
	return o.MovieId, true
}

// HasMovieId returns a boolean if a field has been set.
func (o *ExtraFileResource) HasMovieId() bool {
	if o != nil && !IsNil(o.MovieId) {
		return true
	}

	return false
}

// SetMovieId gets a reference to the given int32 and assigns it to the MovieId field.
func (o *ExtraFileResource) SetMovieId(v int32) {
	o.MovieId = &v
}

// GetMovieFileId returns the MovieFileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtraFileResource) GetMovieFileId() int32 {
	if o == nil || IsNil(o.MovieFileId.Get()) {
		var ret int32
		return ret
	}
	return *o.MovieFileId.Get()
}

// GetMovieFileIdOk returns a tuple with the MovieFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtraFileResource) GetMovieFileIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MovieFileId.Get(), o.MovieFileId.IsSet()
}

// HasMovieFileId returns a boolean if a field has been set.
func (o *ExtraFileResource) HasMovieFileId() bool {
	if o != nil && o.MovieFileId.IsSet() {
		return true
	}

	return false
}

// SetMovieFileId gets a reference to the given NullableInt32 and assigns it to the MovieFileId field.
func (o *ExtraFileResource) SetMovieFileId(v int32) {
	o.MovieFileId.Set(&v)
}
// SetMovieFileIdNil sets the value for MovieFileId to be an explicit nil
func (o *ExtraFileResource) SetMovieFileIdNil() {
	o.MovieFileId.Set(nil)
}

// UnsetMovieFileId ensures that no value is present for MovieFileId, not even an explicit nil
func (o *ExtraFileResource) UnsetMovieFileId() {
	o.MovieFileId.Unset()
}

// GetRelativePath returns the RelativePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtraFileResource) GetRelativePath() string {
	if o == nil || IsNil(o.RelativePath.Get()) {
		var ret string
		return ret
	}
	return *o.RelativePath.Get()
}

// GetRelativePathOk returns a tuple with the RelativePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtraFileResource) GetRelativePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelativePath.Get(), o.RelativePath.IsSet()
}

// HasRelativePath returns a boolean if a field has been set.
func (o *ExtraFileResource) HasRelativePath() bool {
	if o != nil && o.RelativePath.IsSet() {
		return true
	}

	return false
}

// SetRelativePath gets a reference to the given NullableString and assigns it to the RelativePath field.
func (o *ExtraFileResource) SetRelativePath(v string) {
	o.RelativePath.Set(&v)
}
// SetRelativePathNil sets the value for RelativePath to be an explicit nil
func (o *ExtraFileResource) SetRelativePathNil() {
	o.RelativePath.Set(nil)
}

// UnsetRelativePath ensures that no value is present for RelativePath, not even an explicit nil
func (o *ExtraFileResource) UnsetRelativePath() {
	o.RelativePath.Unset()
}

// GetExtension returns the Extension field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtraFileResource) GetExtension() string {
	if o == nil || IsNil(o.Extension.Get()) {
		var ret string
		return ret
	}
	return *o.Extension.Get()
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtraFileResource) GetExtensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extension.Get(), o.Extension.IsSet()
}

// HasExtension returns a boolean if a field has been set.
func (o *ExtraFileResource) HasExtension() bool {
	if o != nil && o.Extension.IsSet() {
		return true
	}

	return false
}

// SetExtension gets a reference to the given NullableString and assigns it to the Extension field.
func (o *ExtraFileResource) SetExtension(v string) {
	o.Extension.Set(&v)
}
// SetExtensionNil sets the value for Extension to be an explicit nil
func (o *ExtraFileResource) SetExtensionNil() {
	o.Extension.Set(nil)
}

// UnsetExtension ensures that no value is present for Extension, not even an explicit nil
func (o *ExtraFileResource) UnsetExtension() {
	o.Extension.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExtraFileResource) GetType() ExtraFileType {
	if o == nil || IsNil(o.Type) {
		var ret ExtraFileType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtraFileResource) GetTypeOk() (*ExtraFileType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExtraFileResource) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ExtraFileType and assigns it to the Type field.
func (o *ExtraFileResource) SetType(v ExtraFileType) {
	o.Type = &v
}

func (o ExtraFileResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtraFileResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MovieId) {
		toSerialize["movieId"] = o.MovieId
	}
	if o.MovieFileId.IsSet() {
		toSerialize["movieFileId"] = o.MovieFileId.Get()
	}
	if o.RelativePath.IsSet() {
		toSerialize["relativePath"] = o.RelativePath.Get()
	}
	if o.Extension.IsSet() {
		toSerialize["extension"] = o.Extension.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableExtraFileResource struct {
	value *ExtraFileResource
	isSet bool
}

func (v NullableExtraFileResource) Get() *ExtraFileResource {
	return v.value
}

func (v *NullableExtraFileResource) Set(val *ExtraFileResource) {
	v.value = val
	v.isSet = true
}

func (v NullableExtraFileResource) IsSet() bool {
	return v.isSet
}

func (v *NullableExtraFileResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtraFileResource(val *ExtraFileResource) *NullableExtraFileResource {
	return &NullableExtraFileResource{value: val, isSet: true}
}

func (v NullableExtraFileResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtraFileResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


