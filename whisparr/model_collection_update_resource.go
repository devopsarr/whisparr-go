/*
Radarr

Radarr API docs

API version: b08981dee068e1ed23e4f45a0d8fe70ef7bf7703
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// checks if the CollectionUpdateResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionUpdateResource{}

// CollectionUpdateResource struct for CollectionUpdateResource
type CollectionUpdateResource struct {
	CollectionIds []int32 `json:"collectionIds,omitempty"`
	Monitored NullableBool `json:"monitored,omitempty"`
	MonitorMovies NullableBool `json:"monitorMovies,omitempty"`
	SearchOnAdd NullableBool `json:"searchOnAdd,omitempty"`
	QualityProfileId NullableInt32 `json:"qualityProfileId,omitempty"`
	RootFolderPath NullableString `json:"rootFolderPath,omitempty"`
	MinimumAvailability *MovieStatusType `json:"minimumAvailability,omitempty"`
}

// NewCollectionUpdateResource instantiates a new CollectionUpdateResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionUpdateResource() *CollectionUpdateResource {
	this := CollectionUpdateResource{}
	return &this
}

// NewCollectionUpdateResourceWithDefaults instantiates a new CollectionUpdateResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionUpdateResourceWithDefaults() *CollectionUpdateResource {
	this := CollectionUpdateResource{}
	return &this
}

// GetCollectionIds returns the CollectionIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CollectionUpdateResource) GetCollectionIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.CollectionIds
}

// GetCollectionIdsOk returns a tuple with the CollectionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CollectionUpdateResource) GetCollectionIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.CollectionIds) {
		return nil, false
	}
	return o.CollectionIds, true
}

// HasCollectionIds returns a boolean if a field has been set.
func (o *CollectionUpdateResource) HasCollectionIds() bool {
	if o != nil && IsNil(o.CollectionIds) {
		return true
	}

	return false
}

// SetCollectionIds gets a reference to the given []int32 and assigns it to the CollectionIds field.
func (o *CollectionUpdateResource) SetCollectionIds(v []int32) {
	o.CollectionIds = v
}

// GetMonitored returns the Monitored field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CollectionUpdateResource) GetMonitored() bool {
	if o == nil || IsNil(o.Monitored.Get()) {
		var ret bool
		return ret
	}
	return *o.Monitored.Get()
}

// GetMonitoredOk returns a tuple with the Monitored field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CollectionUpdateResource) GetMonitoredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Monitored.Get(), o.Monitored.IsSet()
}

// HasMonitored returns a boolean if a field has been set.
func (o *CollectionUpdateResource) HasMonitored() bool {
	if o != nil && o.Monitored.IsSet() {
		return true
	}

	return false
}

// SetMonitored gets a reference to the given NullableBool and assigns it to the Monitored field.
func (o *CollectionUpdateResource) SetMonitored(v bool) {
	o.Monitored.Set(&v)
}
// SetMonitoredNil sets the value for Monitored to be an explicit nil
func (o *CollectionUpdateResource) SetMonitoredNil() {
	o.Monitored.Set(nil)
}

// UnsetMonitored ensures that no value is present for Monitored, not even an explicit nil
func (o *CollectionUpdateResource) UnsetMonitored() {
	o.Monitored.Unset()
}

// GetMonitorMovies returns the MonitorMovies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CollectionUpdateResource) GetMonitorMovies() bool {
	if o == nil || IsNil(o.MonitorMovies.Get()) {
		var ret bool
		return ret
	}
	return *o.MonitorMovies.Get()
}

// GetMonitorMoviesOk returns a tuple with the MonitorMovies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CollectionUpdateResource) GetMonitorMoviesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MonitorMovies.Get(), o.MonitorMovies.IsSet()
}

// HasMonitorMovies returns a boolean if a field has been set.
func (o *CollectionUpdateResource) HasMonitorMovies() bool {
	if o != nil && o.MonitorMovies.IsSet() {
		return true
	}

	return false
}

// SetMonitorMovies gets a reference to the given NullableBool and assigns it to the MonitorMovies field.
func (o *CollectionUpdateResource) SetMonitorMovies(v bool) {
	o.MonitorMovies.Set(&v)
}
// SetMonitorMoviesNil sets the value for MonitorMovies to be an explicit nil
func (o *CollectionUpdateResource) SetMonitorMoviesNil() {
	o.MonitorMovies.Set(nil)
}

// UnsetMonitorMovies ensures that no value is present for MonitorMovies, not even an explicit nil
func (o *CollectionUpdateResource) UnsetMonitorMovies() {
	o.MonitorMovies.Unset()
}

// GetSearchOnAdd returns the SearchOnAdd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CollectionUpdateResource) GetSearchOnAdd() bool {
	if o == nil || IsNil(o.SearchOnAdd.Get()) {
		var ret bool
		return ret
	}
	return *o.SearchOnAdd.Get()
}

// GetSearchOnAddOk returns a tuple with the SearchOnAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CollectionUpdateResource) GetSearchOnAddOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchOnAdd.Get(), o.SearchOnAdd.IsSet()
}

// HasSearchOnAdd returns a boolean if a field has been set.
func (o *CollectionUpdateResource) HasSearchOnAdd() bool {
	if o != nil && o.SearchOnAdd.IsSet() {
		return true
	}

	return false
}

// SetSearchOnAdd gets a reference to the given NullableBool and assigns it to the SearchOnAdd field.
func (o *CollectionUpdateResource) SetSearchOnAdd(v bool) {
	o.SearchOnAdd.Set(&v)
}
// SetSearchOnAddNil sets the value for SearchOnAdd to be an explicit nil
func (o *CollectionUpdateResource) SetSearchOnAddNil() {
	o.SearchOnAdd.Set(nil)
}

// UnsetSearchOnAdd ensures that no value is present for SearchOnAdd, not even an explicit nil
func (o *CollectionUpdateResource) UnsetSearchOnAdd() {
	o.SearchOnAdd.Unset()
}

// GetQualityProfileId returns the QualityProfileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CollectionUpdateResource) GetQualityProfileId() int32 {
	if o == nil || IsNil(o.QualityProfileId.Get()) {
		var ret int32
		return ret
	}
	return *o.QualityProfileId.Get()
}

// GetQualityProfileIdOk returns a tuple with the QualityProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CollectionUpdateResource) GetQualityProfileIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.QualityProfileId.Get(), o.QualityProfileId.IsSet()
}

// HasQualityProfileId returns a boolean if a field has been set.
func (o *CollectionUpdateResource) HasQualityProfileId() bool {
	if o != nil && o.QualityProfileId.IsSet() {
		return true
	}

	return false
}

// SetQualityProfileId gets a reference to the given NullableInt32 and assigns it to the QualityProfileId field.
func (o *CollectionUpdateResource) SetQualityProfileId(v int32) {
	o.QualityProfileId.Set(&v)
}
// SetQualityProfileIdNil sets the value for QualityProfileId to be an explicit nil
func (o *CollectionUpdateResource) SetQualityProfileIdNil() {
	o.QualityProfileId.Set(nil)
}

// UnsetQualityProfileId ensures that no value is present for QualityProfileId, not even an explicit nil
func (o *CollectionUpdateResource) UnsetQualityProfileId() {
	o.QualityProfileId.Unset()
}

// GetRootFolderPath returns the RootFolderPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CollectionUpdateResource) GetRootFolderPath() string {
	if o == nil || IsNil(o.RootFolderPath.Get()) {
		var ret string
		return ret
	}
	return *o.RootFolderPath.Get()
}

// GetRootFolderPathOk returns a tuple with the RootFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CollectionUpdateResource) GetRootFolderPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootFolderPath.Get(), o.RootFolderPath.IsSet()
}

// HasRootFolderPath returns a boolean if a field has been set.
func (o *CollectionUpdateResource) HasRootFolderPath() bool {
	if o != nil && o.RootFolderPath.IsSet() {
		return true
	}

	return false
}

// SetRootFolderPath gets a reference to the given NullableString and assigns it to the RootFolderPath field.
func (o *CollectionUpdateResource) SetRootFolderPath(v string) {
	o.RootFolderPath.Set(&v)
}
// SetRootFolderPathNil sets the value for RootFolderPath to be an explicit nil
func (o *CollectionUpdateResource) SetRootFolderPathNil() {
	o.RootFolderPath.Set(nil)
}

// UnsetRootFolderPath ensures that no value is present for RootFolderPath, not even an explicit nil
func (o *CollectionUpdateResource) UnsetRootFolderPath() {
	o.RootFolderPath.Unset()
}

// GetMinimumAvailability returns the MinimumAvailability field value if set, zero value otherwise.
func (o *CollectionUpdateResource) GetMinimumAvailability() MovieStatusType {
	if o == nil || IsNil(o.MinimumAvailability) {
		var ret MovieStatusType
		return ret
	}
	return *o.MinimumAvailability
}

// GetMinimumAvailabilityOk returns a tuple with the MinimumAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionUpdateResource) GetMinimumAvailabilityOk() (*MovieStatusType, bool) {
	if o == nil || IsNil(o.MinimumAvailability) {
		return nil, false
	}
	return o.MinimumAvailability, true
}

// HasMinimumAvailability returns a boolean if a field has been set.
func (o *CollectionUpdateResource) HasMinimumAvailability() bool {
	if o != nil && !IsNil(o.MinimumAvailability) {
		return true
	}

	return false
}

// SetMinimumAvailability gets a reference to the given MovieStatusType and assigns it to the MinimumAvailability field.
func (o *CollectionUpdateResource) SetMinimumAvailability(v MovieStatusType) {
	o.MinimumAvailability = &v
}

func (o CollectionUpdateResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionUpdateResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CollectionIds != nil {
		toSerialize["collectionIds"] = o.CollectionIds
	}
	if o.Monitored.IsSet() {
		toSerialize["monitored"] = o.Monitored.Get()
	}
	if o.MonitorMovies.IsSet() {
		toSerialize["monitorMovies"] = o.MonitorMovies.Get()
	}
	if o.SearchOnAdd.IsSet() {
		toSerialize["searchOnAdd"] = o.SearchOnAdd.Get()
	}
	if o.QualityProfileId.IsSet() {
		toSerialize["qualityProfileId"] = o.QualityProfileId.Get()
	}
	if o.RootFolderPath.IsSet() {
		toSerialize["rootFolderPath"] = o.RootFolderPath.Get()
	}
	if !IsNil(o.MinimumAvailability) {
		toSerialize["minimumAvailability"] = o.MinimumAvailability
	}
	return toSerialize, nil
}

type NullableCollectionUpdateResource struct {
	value *CollectionUpdateResource
	isSet bool
}

func (v NullableCollectionUpdateResource) Get() *CollectionUpdateResource {
	return v.value
}

func (v *NullableCollectionUpdateResource) Set(val *CollectionUpdateResource) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionUpdateResource) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionUpdateResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionUpdateResource(val *CollectionUpdateResource) *NullableCollectionUpdateResource {
	return &NullableCollectionUpdateResource{value: val, isSet: true}
}

func (v NullableCollectionUpdateResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionUpdateResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


