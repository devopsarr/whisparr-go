/*
Radarr

Radarr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
	"time"
)

// MovieResource struct for MovieResource
type MovieResource struct {
	Id *int32 `json:"id,omitempty"`
	Title NullableString `json:"title,omitempty"`
	OriginalTitle NullableString `json:"originalTitle,omitempty"`
	OriginalLanguage *Language `json:"originalLanguage,omitempty"`
	AlternateTitles []*AlternativeTitleResource `json:"alternateTitles,omitempty"`
	SecondaryYear NullableInt32 `json:"secondaryYear,omitempty"`
	SecondaryYearSourceId *int32 `json:"secondaryYearSourceId,omitempty"`
	SortTitle NullableString `json:"sortTitle,omitempty"`
	SizeOnDisk NullableInt64 `json:"sizeOnDisk,omitempty"`
	Status *MovieStatusType `json:"status,omitempty"`
	Overview NullableString `json:"overview,omitempty"`
	InCinemas NullableTime `json:"inCinemas,omitempty"`
	PhysicalRelease NullableTime `json:"physicalRelease,omitempty"`
	DigitalRelease NullableTime `json:"digitalRelease,omitempty"`
	PhysicalReleaseNote NullableString `json:"physicalReleaseNote,omitempty"`
	Images []*MediaCover `json:"images,omitempty"`
	Website NullableString `json:"website,omitempty"`
	RemotePoster NullableString `json:"remotePoster,omitempty"`
	Year *int32 `json:"year,omitempty"`
	HasFile *bool `json:"hasFile,omitempty"`
	YouTubeTrailerId NullableString `json:"youTubeTrailerId,omitempty"`
	Studio NullableString `json:"studio,omitempty"`
	Path NullableString `json:"path,omitempty"`
	QualityProfileId *int32 `json:"qualityProfileId,omitempty"`
	Monitored *bool `json:"monitored,omitempty"`
	MinimumAvailability *MovieStatusType `json:"minimumAvailability,omitempty"`
	IsAvailable *bool `json:"isAvailable,omitempty"`
	FolderName NullableString `json:"folderName,omitempty"`
	Runtime *int32 `json:"runtime,omitempty"`
	CleanTitle NullableString `json:"cleanTitle,omitempty"`
	ImdbId NullableString `json:"imdbId,omitempty"`
	TmdbId *int32 `json:"tmdbId,omitempty"`
	TitleSlug NullableString `json:"titleSlug,omitempty"`
	RootFolderPath NullableString `json:"rootFolderPath,omitempty"`
	Folder NullableString `json:"folder,omitempty"`
	Certification NullableString `json:"certification,omitempty"`
	Genres []*string `json:"genres,omitempty"`
	Tags []*int32 `json:"tags,omitempty"`
	Added *time.Time `json:"added,omitempty"`
	AddOptions *AddMovieOptions `json:"addOptions,omitempty"`
	Ratings *Ratings `json:"ratings,omitempty"`
	MovieFile *MovieFileResource `json:"movieFile,omitempty"`
	Collection *MovieCollectionResource `json:"collection,omitempty"`
	Popularity *float32 `json:"popularity,omitempty"`
}

// NewMovieResource instantiates a new MovieResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovieResource() *MovieResource {
	this := MovieResource{}
	return &this
}

// NewMovieResourceWithDefaults instantiates a new MovieResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieResourceWithDefaults() *MovieResource {
	this := MovieResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MovieResource) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MovieResource) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MovieResource) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *MovieResource) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *MovieResource) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *MovieResource) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *MovieResource) UnsetTitle() {
	o.Title.Unset()
}

// GetOriginalTitle returns the OriginalTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetOriginalTitle() string {
	if o == nil || isNil(o.OriginalTitle.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalTitle.Get()
}

// GetOriginalTitleOk returns a tuple with the OriginalTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetOriginalTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.OriginalTitle.Get(), o.OriginalTitle.IsSet()
}

// HasOriginalTitle returns a boolean if a field has been set.
func (o *MovieResource) HasOriginalTitle() bool {
	if o != nil && o.OriginalTitle.IsSet() {
		return true
	}

	return false
}

// SetOriginalTitle gets a reference to the given NullableString and assigns it to the OriginalTitle field.
func (o *MovieResource) SetOriginalTitle(v string) {
	o.OriginalTitle.Set(&v)
}
// SetOriginalTitleNil sets the value for OriginalTitle to be an explicit nil
func (o *MovieResource) SetOriginalTitleNil() {
	o.OriginalTitle.Set(nil)
}

// UnsetOriginalTitle ensures that no value is present for OriginalTitle, not even an explicit nil
func (o *MovieResource) UnsetOriginalTitle() {
	o.OriginalTitle.Unset()
}

// GetOriginalLanguage returns the OriginalLanguage field value if set, zero value otherwise.
func (o *MovieResource) GetOriginalLanguage() Language {
	if o == nil || isNil(o.OriginalLanguage) {
		var ret Language
		return ret
	}
	return *o.OriginalLanguage
}

// GetOriginalLanguageOk returns a tuple with the OriginalLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetOriginalLanguageOk() (*Language, bool) {
	if o == nil || isNil(o.OriginalLanguage) {
    return nil, false
	}
	return o.OriginalLanguage, true
}

// HasOriginalLanguage returns a boolean if a field has been set.
func (o *MovieResource) HasOriginalLanguage() bool {
	if o != nil && !isNil(o.OriginalLanguage) {
		return true
	}

	return false
}

// SetOriginalLanguage gets a reference to the given Language and assigns it to the OriginalLanguage field.
func (o *MovieResource) SetOriginalLanguage(v Language) {
	o.OriginalLanguage = &v
}

// GetAlternateTitles returns the AlternateTitles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetAlternateTitles() []*AlternativeTitleResource {
	if o == nil {
		var ret []*AlternativeTitleResource
		return ret
	}
	return o.AlternateTitles
}

// GetAlternateTitlesOk returns a tuple with the AlternateTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetAlternateTitlesOk() ([]*AlternativeTitleResource, bool) {
	if o == nil || isNil(o.AlternateTitles) {
    return nil, false
	}
	return o.AlternateTitles, true
}

// HasAlternateTitles returns a boolean if a field has been set.
func (o *MovieResource) HasAlternateTitles() bool {
	if o != nil && isNil(o.AlternateTitles) {
		return true
	}

	return false
}

// SetAlternateTitles gets a reference to the given []AlternativeTitleResource and assigns it to the AlternateTitles field.
func (o *MovieResource) SetAlternateTitles(v []*AlternativeTitleResource) {
	o.AlternateTitles = v
}

// GetSecondaryYear returns the SecondaryYear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetSecondaryYear() int32 {
	if o == nil || isNil(o.SecondaryYear.Get()) {
		var ret int32
		return ret
	}
	return *o.SecondaryYear.Get()
}

// GetSecondaryYearOk returns a tuple with the SecondaryYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetSecondaryYearOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.SecondaryYear.Get(), o.SecondaryYear.IsSet()
}

// HasSecondaryYear returns a boolean if a field has been set.
func (o *MovieResource) HasSecondaryYear() bool {
	if o != nil && o.SecondaryYear.IsSet() {
		return true
	}

	return false
}

// SetSecondaryYear gets a reference to the given NullableInt32 and assigns it to the SecondaryYear field.
func (o *MovieResource) SetSecondaryYear(v int32) {
	o.SecondaryYear.Set(&v)
}
// SetSecondaryYearNil sets the value for SecondaryYear to be an explicit nil
func (o *MovieResource) SetSecondaryYearNil() {
	o.SecondaryYear.Set(nil)
}

// UnsetSecondaryYear ensures that no value is present for SecondaryYear, not even an explicit nil
func (o *MovieResource) UnsetSecondaryYear() {
	o.SecondaryYear.Unset()
}

// GetSecondaryYearSourceId returns the SecondaryYearSourceId field value if set, zero value otherwise.
func (o *MovieResource) GetSecondaryYearSourceId() int32 {
	if o == nil || isNil(o.SecondaryYearSourceId) {
		var ret int32
		return ret
	}
	return *o.SecondaryYearSourceId
}

// GetSecondaryYearSourceIdOk returns a tuple with the SecondaryYearSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetSecondaryYearSourceIdOk() (*int32, bool) {
	if o == nil || isNil(o.SecondaryYearSourceId) {
    return nil, false
	}
	return o.SecondaryYearSourceId, true
}

// HasSecondaryYearSourceId returns a boolean if a field has been set.
func (o *MovieResource) HasSecondaryYearSourceId() bool {
	if o != nil && !isNil(o.SecondaryYearSourceId) {
		return true
	}

	return false
}

// SetSecondaryYearSourceId gets a reference to the given int32 and assigns it to the SecondaryYearSourceId field.
func (o *MovieResource) SetSecondaryYearSourceId(v int32) {
	o.SecondaryYearSourceId = &v
}

// GetSortTitle returns the SortTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetSortTitle() string {
	if o == nil || isNil(o.SortTitle.Get()) {
		var ret string
		return ret
	}
	return *o.SortTitle.Get()
}

// GetSortTitleOk returns a tuple with the SortTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetSortTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SortTitle.Get(), o.SortTitle.IsSet()
}

// HasSortTitle returns a boolean if a field has been set.
func (o *MovieResource) HasSortTitle() bool {
	if o != nil && o.SortTitle.IsSet() {
		return true
	}

	return false
}

// SetSortTitle gets a reference to the given NullableString and assigns it to the SortTitle field.
func (o *MovieResource) SetSortTitle(v string) {
	o.SortTitle.Set(&v)
}
// SetSortTitleNil sets the value for SortTitle to be an explicit nil
func (o *MovieResource) SetSortTitleNil() {
	o.SortTitle.Set(nil)
}

// UnsetSortTitle ensures that no value is present for SortTitle, not even an explicit nil
func (o *MovieResource) UnsetSortTitle() {
	o.SortTitle.Unset()
}

// GetSizeOnDisk returns the SizeOnDisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetSizeOnDisk() int64 {
	if o == nil || isNil(o.SizeOnDisk.Get()) {
		var ret int64
		return ret
	}
	return *o.SizeOnDisk.Get()
}

// GetSizeOnDiskOk returns a tuple with the SizeOnDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetSizeOnDiskOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return o.SizeOnDisk.Get(), o.SizeOnDisk.IsSet()
}

// HasSizeOnDisk returns a boolean if a field has been set.
func (o *MovieResource) HasSizeOnDisk() bool {
	if o != nil && o.SizeOnDisk.IsSet() {
		return true
	}

	return false
}

// SetSizeOnDisk gets a reference to the given NullableInt64 and assigns it to the SizeOnDisk field.
func (o *MovieResource) SetSizeOnDisk(v int64) {
	o.SizeOnDisk.Set(&v)
}
// SetSizeOnDiskNil sets the value for SizeOnDisk to be an explicit nil
func (o *MovieResource) SetSizeOnDiskNil() {
	o.SizeOnDisk.Set(nil)
}

// UnsetSizeOnDisk ensures that no value is present for SizeOnDisk, not even an explicit nil
func (o *MovieResource) UnsetSizeOnDisk() {
	o.SizeOnDisk.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MovieResource) GetStatus() MovieStatusType {
	if o == nil || isNil(o.Status) {
		var ret MovieStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetStatusOk() (*MovieStatusType, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MovieResource) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given MovieStatusType and assigns it to the Status field.
func (o *MovieResource) SetStatus(v MovieStatusType) {
	o.Status = &v
}

// GetOverview returns the Overview field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetOverview() string {
	if o == nil || isNil(o.Overview.Get()) {
		var ret string
		return ret
	}
	return *o.Overview.Get()
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetOverviewOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Overview.Get(), o.Overview.IsSet()
}

// HasOverview returns a boolean if a field has been set.
func (o *MovieResource) HasOverview() bool {
	if o != nil && o.Overview.IsSet() {
		return true
	}

	return false
}

// SetOverview gets a reference to the given NullableString and assigns it to the Overview field.
func (o *MovieResource) SetOverview(v string) {
	o.Overview.Set(&v)
}
// SetOverviewNil sets the value for Overview to be an explicit nil
func (o *MovieResource) SetOverviewNil() {
	o.Overview.Set(nil)
}

// UnsetOverview ensures that no value is present for Overview, not even an explicit nil
func (o *MovieResource) UnsetOverview() {
	o.Overview.Unset()
}

// GetInCinemas returns the InCinemas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetInCinemas() time.Time {
	if o == nil || isNil(o.InCinemas.Get()) {
		var ret time.Time
		return ret
	}
	return *o.InCinemas.Get()
}

// GetInCinemasOk returns a tuple with the InCinemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetInCinemasOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.InCinemas.Get(), o.InCinemas.IsSet()
}

// HasInCinemas returns a boolean if a field has been set.
func (o *MovieResource) HasInCinemas() bool {
	if o != nil && o.InCinemas.IsSet() {
		return true
	}

	return false
}

// SetInCinemas gets a reference to the given NullableTime and assigns it to the InCinemas field.
func (o *MovieResource) SetInCinemas(v time.Time) {
	o.InCinemas.Set(&v)
}
// SetInCinemasNil sets the value for InCinemas to be an explicit nil
func (o *MovieResource) SetInCinemasNil() {
	o.InCinemas.Set(nil)
}

// UnsetInCinemas ensures that no value is present for InCinemas, not even an explicit nil
func (o *MovieResource) UnsetInCinemas() {
	o.InCinemas.Unset()
}

// GetPhysicalRelease returns the PhysicalRelease field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetPhysicalRelease() time.Time {
	if o == nil || isNil(o.PhysicalRelease.Get()) {
		var ret time.Time
		return ret
	}
	return *o.PhysicalRelease.Get()
}

// GetPhysicalReleaseOk returns a tuple with the PhysicalRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetPhysicalReleaseOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.PhysicalRelease.Get(), o.PhysicalRelease.IsSet()
}

// HasPhysicalRelease returns a boolean if a field has been set.
func (o *MovieResource) HasPhysicalRelease() bool {
	if o != nil && o.PhysicalRelease.IsSet() {
		return true
	}

	return false
}

// SetPhysicalRelease gets a reference to the given NullableTime and assigns it to the PhysicalRelease field.
func (o *MovieResource) SetPhysicalRelease(v time.Time) {
	o.PhysicalRelease.Set(&v)
}
// SetPhysicalReleaseNil sets the value for PhysicalRelease to be an explicit nil
func (o *MovieResource) SetPhysicalReleaseNil() {
	o.PhysicalRelease.Set(nil)
}

// UnsetPhysicalRelease ensures that no value is present for PhysicalRelease, not even an explicit nil
func (o *MovieResource) UnsetPhysicalRelease() {
	o.PhysicalRelease.Unset()
}

// GetDigitalRelease returns the DigitalRelease field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetDigitalRelease() time.Time {
	if o == nil || isNil(o.DigitalRelease.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DigitalRelease.Get()
}

// GetDigitalReleaseOk returns a tuple with the DigitalRelease field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetDigitalReleaseOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.DigitalRelease.Get(), o.DigitalRelease.IsSet()
}

// HasDigitalRelease returns a boolean if a field has been set.
func (o *MovieResource) HasDigitalRelease() bool {
	if o != nil && o.DigitalRelease.IsSet() {
		return true
	}

	return false
}

// SetDigitalRelease gets a reference to the given NullableTime and assigns it to the DigitalRelease field.
func (o *MovieResource) SetDigitalRelease(v time.Time) {
	o.DigitalRelease.Set(&v)
}
// SetDigitalReleaseNil sets the value for DigitalRelease to be an explicit nil
func (o *MovieResource) SetDigitalReleaseNil() {
	o.DigitalRelease.Set(nil)
}

// UnsetDigitalRelease ensures that no value is present for DigitalRelease, not even an explicit nil
func (o *MovieResource) UnsetDigitalRelease() {
	o.DigitalRelease.Unset()
}

// GetPhysicalReleaseNote returns the PhysicalReleaseNote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetPhysicalReleaseNote() string {
	if o == nil || isNil(o.PhysicalReleaseNote.Get()) {
		var ret string
		return ret
	}
	return *o.PhysicalReleaseNote.Get()
}

// GetPhysicalReleaseNoteOk returns a tuple with the PhysicalReleaseNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetPhysicalReleaseNoteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.PhysicalReleaseNote.Get(), o.PhysicalReleaseNote.IsSet()
}

// HasPhysicalReleaseNote returns a boolean if a field has been set.
func (o *MovieResource) HasPhysicalReleaseNote() bool {
	if o != nil && o.PhysicalReleaseNote.IsSet() {
		return true
	}

	return false
}

// SetPhysicalReleaseNote gets a reference to the given NullableString and assigns it to the PhysicalReleaseNote field.
func (o *MovieResource) SetPhysicalReleaseNote(v string) {
	o.PhysicalReleaseNote.Set(&v)
}
// SetPhysicalReleaseNoteNil sets the value for PhysicalReleaseNote to be an explicit nil
func (o *MovieResource) SetPhysicalReleaseNoteNil() {
	o.PhysicalReleaseNote.Set(nil)
}

// UnsetPhysicalReleaseNote ensures that no value is present for PhysicalReleaseNote, not even an explicit nil
func (o *MovieResource) UnsetPhysicalReleaseNote() {
	o.PhysicalReleaseNote.Unset()
}

// GetImages returns the Images field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetImages() []*MediaCover {
	if o == nil {
		var ret []*MediaCover
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetImagesOk() ([]*MediaCover, bool) {
	if o == nil || isNil(o.Images) {
    return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *MovieResource) HasImages() bool {
	if o != nil && isNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []MediaCover and assigns it to the Images field.
func (o *MovieResource) SetImages(v []*MediaCover) {
	o.Images = v
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetWebsite() string {
	if o == nil || isNil(o.Website.Get()) {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetWebsiteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *MovieResource) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *MovieResource) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *MovieResource) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *MovieResource) UnsetWebsite() {
	o.Website.Unset()
}

// GetRemotePoster returns the RemotePoster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetRemotePoster() string {
	if o == nil || isNil(o.RemotePoster.Get()) {
		var ret string
		return ret
	}
	return *o.RemotePoster.Get()
}

// GetRemotePosterOk returns a tuple with the RemotePoster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetRemotePosterOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RemotePoster.Get(), o.RemotePoster.IsSet()
}

// HasRemotePoster returns a boolean if a field has been set.
func (o *MovieResource) HasRemotePoster() bool {
	if o != nil && o.RemotePoster.IsSet() {
		return true
	}

	return false
}

// SetRemotePoster gets a reference to the given NullableString and assigns it to the RemotePoster field.
func (o *MovieResource) SetRemotePoster(v string) {
	o.RemotePoster.Set(&v)
}
// SetRemotePosterNil sets the value for RemotePoster to be an explicit nil
func (o *MovieResource) SetRemotePosterNil() {
	o.RemotePoster.Set(nil)
}

// UnsetRemotePoster ensures that no value is present for RemotePoster, not even an explicit nil
func (o *MovieResource) UnsetRemotePoster() {
	o.RemotePoster.Unset()
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *MovieResource) GetYear() int32 {
	if o == nil || isNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetYearOk() (*int32, bool) {
	if o == nil || isNil(o.Year) {
    return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *MovieResource) HasYear() bool {
	if o != nil && !isNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *MovieResource) SetYear(v int32) {
	o.Year = &v
}

// GetHasFile returns the HasFile field value if set, zero value otherwise.
func (o *MovieResource) GetHasFile() bool {
	if o == nil || isNil(o.HasFile) {
		var ret bool
		return ret
	}
	return *o.HasFile
}

// GetHasFileOk returns a tuple with the HasFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetHasFileOk() (*bool, bool) {
	if o == nil || isNil(o.HasFile) {
    return nil, false
	}
	return o.HasFile, true
}

// HasHasFile returns a boolean if a field has been set.
func (o *MovieResource) HasHasFile() bool {
	if o != nil && !isNil(o.HasFile) {
		return true
	}

	return false
}

// SetHasFile gets a reference to the given bool and assigns it to the HasFile field.
func (o *MovieResource) SetHasFile(v bool) {
	o.HasFile = &v
}

// GetYouTubeTrailerId returns the YouTubeTrailerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetYouTubeTrailerId() string {
	if o == nil || isNil(o.YouTubeTrailerId.Get()) {
		var ret string
		return ret
	}
	return *o.YouTubeTrailerId.Get()
}

// GetYouTubeTrailerIdOk returns a tuple with the YouTubeTrailerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetYouTubeTrailerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.YouTubeTrailerId.Get(), o.YouTubeTrailerId.IsSet()
}

// HasYouTubeTrailerId returns a boolean if a field has been set.
func (o *MovieResource) HasYouTubeTrailerId() bool {
	if o != nil && o.YouTubeTrailerId.IsSet() {
		return true
	}

	return false
}

// SetYouTubeTrailerId gets a reference to the given NullableString and assigns it to the YouTubeTrailerId field.
func (o *MovieResource) SetYouTubeTrailerId(v string) {
	o.YouTubeTrailerId.Set(&v)
}
// SetYouTubeTrailerIdNil sets the value for YouTubeTrailerId to be an explicit nil
func (o *MovieResource) SetYouTubeTrailerIdNil() {
	o.YouTubeTrailerId.Set(nil)
}

// UnsetYouTubeTrailerId ensures that no value is present for YouTubeTrailerId, not even an explicit nil
func (o *MovieResource) UnsetYouTubeTrailerId() {
	o.YouTubeTrailerId.Unset()
}

// GetStudio returns the Studio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetStudio() string {
	if o == nil || isNil(o.Studio.Get()) {
		var ret string
		return ret
	}
	return *o.Studio.Get()
}

// GetStudioOk returns a tuple with the Studio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetStudioOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Studio.Get(), o.Studio.IsSet()
}

// HasStudio returns a boolean if a field has been set.
func (o *MovieResource) HasStudio() bool {
	if o != nil && o.Studio.IsSet() {
		return true
	}

	return false
}

// SetStudio gets a reference to the given NullableString and assigns it to the Studio field.
func (o *MovieResource) SetStudio(v string) {
	o.Studio.Set(&v)
}
// SetStudioNil sets the value for Studio to be an explicit nil
func (o *MovieResource) SetStudioNil() {
	o.Studio.Set(nil)
}

// UnsetStudio ensures that no value is present for Studio, not even an explicit nil
func (o *MovieResource) UnsetStudio() {
	o.Studio.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetPath() string {
	if o == nil || isNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetPathOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *MovieResource) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *MovieResource) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *MovieResource) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *MovieResource) UnsetPath() {
	o.Path.Unset()
}

// GetQualityProfileId returns the QualityProfileId field value if set, zero value otherwise.
func (o *MovieResource) GetQualityProfileId() int32 {
	if o == nil || isNil(o.QualityProfileId) {
		var ret int32
		return ret
	}
	return *o.QualityProfileId
}

// GetQualityProfileIdOk returns a tuple with the QualityProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetQualityProfileIdOk() (*int32, bool) {
	if o == nil || isNil(o.QualityProfileId) {
    return nil, false
	}
	return o.QualityProfileId, true
}

// HasQualityProfileId returns a boolean if a field has been set.
func (o *MovieResource) HasQualityProfileId() bool {
	if o != nil && !isNil(o.QualityProfileId) {
		return true
	}

	return false
}

// SetQualityProfileId gets a reference to the given int32 and assigns it to the QualityProfileId field.
func (o *MovieResource) SetQualityProfileId(v int32) {
	o.QualityProfileId = &v
}

// GetMonitored returns the Monitored field value if set, zero value otherwise.
func (o *MovieResource) GetMonitored() bool {
	if o == nil || isNil(o.Monitored) {
		var ret bool
		return ret
	}
	return *o.Monitored
}

// GetMonitoredOk returns a tuple with the Monitored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetMonitoredOk() (*bool, bool) {
	if o == nil || isNil(o.Monitored) {
    return nil, false
	}
	return o.Monitored, true
}

// HasMonitored returns a boolean if a field has been set.
func (o *MovieResource) HasMonitored() bool {
	if o != nil && !isNil(o.Monitored) {
		return true
	}

	return false
}

// SetMonitored gets a reference to the given bool and assigns it to the Monitored field.
func (o *MovieResource) SetMonitored(v bool) {
	o.Monitored = &v
}

// GetMinimumAvailability returns the MinimumAvailability field value if set, zero value otherwise.
func (o *MovieResource) GetMinimumAvailability() MovieStatusType {
	if o == nil || isNil(o.MinimumAvailability) {
		var ret MovieStatusType
		return ret
	}
	return *o.MinimumAvailability
}

// GetMinimumAvailabilityOk returns a tuple with the MinimumAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetMinimumAvailabilityOk() (*MovieStatusType, bool) {
	if o == nil || isNil(o.MinimumAvailability) {
    return nil, false
	}
	return o.MinimumAvailability, true
}

// HasMinimumAvailability returns a boolean if a field has been set.
func (o *MovieResource) HasMinimumAvailability() bool {
	if o != nil && !isNil(o.MinimumAvailability) {
		return true
	}

	return false
}

// SetMinimumAvailability gets a reference to the given MovieStatusType and assigns it to the MinimumAvailability field.
func (o *MovieResource) SetMinimumAvailability(v MovieStatusType) {
	o.MinimumAvailability = &v
}

// GetIsAvailable returns the IsAvailable field value if set, zero value otherwise.
func (o *MovieResource) GetIsAvailable() bool {
	if o == nil || isNil(o.IsAvailable) {
		var ret bool
		return ret
	}
	return *o.IsAvailable
}

// GetIsAvailableOk returns a tuple with the IsAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetIsAvailableOk() (*bool, bool) {
	if o == nil || isNil(o.IsAvailable) {
    return nil, false
	}
	return o.IsAvailable, true
}

// HasIsAvailable returns a boolean if a field has been set.
func (o *MovieResource) HasIsAvailable() bool {
	if o != nil && !isNil(o.IsAvailable) {
		return true
	}

	return false
}

// SetIsAvailable gets a reference to the given bool and assigns it to the IsAvailable field.
func (o *MovieResource) SetIsAvailable(v bool) {
	o.IsAvailable = &v
}

// GetFolderName returns the FolderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetFolderName() string {
	if o == nil || isNil(o.FolderName.Get()) {
		var ret string
		return ret
	}
	return *o.FolderName.Get()
}

// GetFolderNameOk returns a tuple with the FolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetFolderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FolderName.Get(), o.FolderName.IsSet()
}

// HasFolderName returns a boolean if a field has been set.
func (o *MovieResource) HasFolderName() bool {
	if o != nil && o.FolderName.IsSet() {
		return true
	}

	return false
}

// SetFolderName gets a reference to the given NullableString and assigns it to the FolderName field.
func (o *MovieResource) SetFolderName(v string) {
	o.FolderName.Set(&v)
}
// SetFolderNameNil sets the value for FolderName to be an explicit nil
func (o *MovieResource) SetFolderNameNil() {
	o.FolderName.Set(nil)
}

// UnsetFolderName ensures that no value is present for FolderName, not even an explicit nil
func (o *MovieResource) UnsetFolderName() {
	o.FolderName.Unset()
}

// GetRuntime returns the Runtime field value if set, zero value otherwise.
func (o *MovieResource) GetRuntime() int32 {
	if o == nil || isNil(o.Runtime) {
		var ret int32
		return ret
	}
	return *o.Runtime
}

// GetRuntimeOk returns a tuple with the Runtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetRuntimeOk() (*int32, bool) {
	if o == nil || isNil(o.Runtime) {
    return nil, false
	}
	return o.Runtime, true
}

// HasRuntime returns a boolean if a field has been set.
func (o *MovieResource) HasRuntime() bool {
	if o != nil && !isNil(o.Runtime) {
		return true
	}

	return false
}

// SetRuntime gets a reference to the given int32 and assigns it to the Runtime field.
func (o *MovieResource) SetRuntime(v int32) {
	o.Runtime = &v
}

// GetCleanTitle returns the CleanTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetCleanTitle() string {
	if o == nil || isNil(o.CleanTitle.Get()) {
		var ret string
		return ret
	}
	return *o.CleanTitle.Get()
}

// GetCleanTitleOk returns a tuple with the CleanTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetCleanTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CleanTitle.Get(), o.CleanTitle.IsSet()
}

// HasCleanTitle returns a boolean if a field has been set.
func (o *MovieResource) HasCleanTitle() bool {
	if o != nil && o.CleanTitle.IsSet() {
		return true
	}

	return false
}

// SetCleanTitle gets a reference to the given NullableString and assigns it to the CleanTitle field.
func (o *MovieResource) SetCleanTitle(v string) {
	o.CleanTitle.Set(&v)
}
// SetCleanTitleNil sets the value for CleanTitle to be an explicit nil
func (o *MovieResource) SetCleanTitleNil() {
	o.CleanTitle.Set(nil)
}

// UnsetCleanTitle ensures that no value is present for CleanTitle, not even an explicit nil
func (o *MovieResource) UnsetCleanTitle() {
	o.CleanTitle.Unset()
}

// GetImdbId returns the ImdbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetImdbId() string {
	if o == nil || isNil(o.ImdbId.Get()) {
		var ret string
		return ret
	}
	return *o.ImdbId.Get()
}

// GetImdbIdOk returns a tuple with the ImdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetImdbIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ImdbId.Get(), o.ImdbId.IsSet()
}

// HasImdbId returns a boolean if a field has been set.
func (o *MovieResource) HasImdbId() bool {
	if o != nil && o.ImdbId.IsSet() {
		return true
	}

	return false
}

// SetImdbId gets a reference to the given NullableString and assigns it to the ImdbId field.
func (o *MovieResource) SetImdbId(v string) {
	o.ImdbId.Set(&v)
}
// SetImdbIdNil sets the value for ImdbId to be an explicit nil
func (o *MovieResource) SetImdbIdNil() {
	o.ImdbId.Set(nil)
}

// UnsetImdbId ensures that no value is present for ImdbId, not even an explicit nil
func (o *MovieResource) UnsetImdbId() {
	o.ImdbId.Unset()
}

// GetTmdbId returns the TmdbId field value if set, zero value otherwise.
func (o *MovieResource) GetTmdbId() int32 {
	if o == nil || isNil(o.TmdbId) {
		var ret int32
		return ret
	}
	return *o.TmdbId
}

// GetTmdbIdOk returns a tuple with the TmdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetTmdbIdOk() (*int32, bool) {
	if o == nil || isNil(o.TmdbId) {
    return nil, false
	}
	return o.TmdbId, true
}

// HasTmdbId returns a boolean if a field has been set.
func (o *MovieResource) HasTmdbId() bool {
	if o != nil && !isNil(o.TmdbId) {
		return true
	}

	return false
}

// SetTmdbId gets a reference to the given int32 and assigns it to the TmdbId field.
func (o *MovieResource) SetTmdbId(v int32) {
	o.TmdbId = &v
}

// GetTitleSlug returns the TitleSlug field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetTitleSlug() string {
	if o == nil || isNil(o.TitleSlug.Get()) {
		var ret string
		return ret
	}
	return *o.TitleSlug.Get()
}

// GetTitleSlugOk returns a tuple with the TitleSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetTitleSlugOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TitleSlug.Get(), o.TitleSlug.IsSet()
}

// HasTitleSlug returns a boolean if a field has been set.
func (o *MovieResource) HasTitleSlug() bool {
	if o != nil && o.TitleSlug.IsSet() {
		return true
	}

	return false
}

// SetTitleSlug gets a reference to the given NullableString and assigns it to the TitleSlug field.
func (o *MovieResource) SetTitleSlug(v string) {
	o.TitleSlug.Set(&v)
}
// SetTitleSlugNil sets the value for TitleSlug to be an explicit nil
func (o *MovieResource) SetTitleSlugNil() {
	o.TitleSlug.Set(nil)
}

// UnsetTitleSlug ensures that no value is present for TitleSlug, not even an explicit nil
func (o *MovieResource) UnsetTitleSlug() {
	o.TitleSlug.Unset()
}

// GetRootFolderPath returns the RootFolderPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetRootFolderPath() string {
	if o == nil || isNil(o.RootFolderPath.Get()) {
		var ret string
		return ret
	}
	return *o.RootFolderPath.Get()
}

// GetRootFolderPathOk returns a tuple with the RootFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetRootFolderPathOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RootFolderPath.Get(), o.RootFolderPath.IsSet()
}

// HasRootFolderPath returns a boolean if a field has been set.
func (o *MovieResource) HasRootFolderPath() bool {
	if o != nil && o.RootFolderPath.IsSet() {
		return true
	}

	return false
}

// SetRootFolderPath gets a reference to the given NullableString and assigns it to the RootFolderPath field.
func (o *MovieResource) SetRootFolderPath(v string) {
	o.RootFolderPath.Set(&v)
}
// SetRootFolderPathNil sets the value for RootFolderPath to be an explicit nil
func (o *MovieResource) SetRootFolderPathNil() {
	o.RootFolderPath.Set(nil)
}

// UnsetRootFolderPath ensures that no value is present for RootFolderPath, not even an explicit nil
func (o *MovieResource) UnsetRootFolderPath() {
	o.RootFolderPath.Unset()
}

// GetFolder returns the Folder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetFolder() string {
	if o == nil || isNil(o.Folder.Get()) {
		var ret string
		return ret
	}
	return *o.Folder.Get()
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetFolderOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Folder.Get(), o.Folder.IsSet()
}

// HasFolder returns a boolean if a field has been set.
func (o *MovieResource) HasFolder() bool {
	if o != nil && o.Folder.IsSet() {
		return true
	}

	return false
}

// SetFolder gets a reference to the given NullableString and assigns it to the Folder field.
func (o *MovieResource) SetFolder(v string) {
	o.Folder.Set(&v)
}
// SetFolderNil sets the value for Folder to be an explicit nil
func (o *MovieResource) SetFolderNil() {
	o.Folder.Set(nil)
}

// UnsetFolder ensures that no value is present for Folder, not even an explicit nil
func (o *MovieResource) UnsetFolder() {
	o.Folder.Unset()
}

// GetCertification returns the Certification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetCertification() string {
	if o == nil || isNil(o.Certification.Get()) {
		var ret string
		return ret
	}
	return *o.Certification.Get()
}

// GetCertificationOk returns a tuple with the Certification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetCertificationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Certification.Get(), o.Certification.IsSet()
}

// HasCertification returns a boolean if a field has been set.
func (o *MovieResource) HasCertification() bool {
	if o != nil && o.Certification.IsSet() {
		return true
	}

	return false
}

// SetCertification gets a reference to the given NullableString and assigns it to the Certification field.
func (o *MovieResource) SetCertification(v string) {
	o.Certification.Set(&v)
}
// SetCertificationNil sets the value for Certification to be an explicit nil
func (o *MovieResource) SetCertificationNil() {
	o.Certification.Set(nil)
}

// UnsetCertification ensures that no value is present for Certification, not even an explicit nil
func (o *MovieResource) UnsetCertification() {
	o.Certification.Unset()
}

// GetGenres returns the Genres field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetGenres() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetGenresOk() ([]*string, bool) {
	if o == nil || isNil(o.Genres) {
    return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *MovieResource) HasGenres() bool {
	if o != nil && isNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []string and assigns it to the Genres field.
func (o *MovieResource) SetGenres(v []*string) {
	o.Genres = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieResource) GetTags() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieResource) GetTagsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MovieResource) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *MovieResource) SetTags(v []*int32) {
	o.Tags = v
}

// GetAdded returns the Added field value if set, zero value otherwise.
func (o *MovieResource) GetAdded() time.Time {
	if o == nil || isNil(o.Added) {
		var ret time.Time
		return ret
	}
	return *o.Added
}

// GetAddedOk returns a tuple with the Added field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetAddedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Added) {
    return nil, false
	}
	return o.Added, true
}

// HasAdded returns a boolean if a field has been set.
func (o *MovieResource) HasAdded() bool {
	if o != nil && !isNil(o.Added) {
		return true
	}

	return false
}

// SetAdded gets a reference to the given time.Time and assigns it to the Added field.
func (o *MovieResource) SetAdded(v time.Time) {
	o.Added = &v
}

// GetAddOptions returns the AddOptions field value if set, zero value otherwise.
func (o *MovieResource) GetAddOptions() AddMovieOptions {
	if o == nil || isNil(o.AddOptions) {
		var ret AddMovieOptions
		return ret
	}
	return *o.AddOptions
}

// GetAddOptionsOk returns a tuple with the AddOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetAddOptionsOk() (*AddMovieOptions, bool) {
	if o == nil || isNil(o.AddOptions) {
    return nil, false
	}
	return o.AddOptions, true
}

// HasAddOptions returns a boolean if a field has been set.
func (o *MovieResource) HasAddOptions() bool {
	if o != nil && !isNil(o.AddOptions) {
		return true
	}

	return false
}

// SetAddOptions gets a reference to the given AddMovieOptions and assigns it to the AddOptions field.
func (o *MovieResource) SetAddOptions(v AddMovieOptions) {
	o.AddOptions = &v
}

// GetRatings returns the Ratings field value if set, zero value otherwise.
func (o *MovieResource) GetRatings() Ratings {
	if o == nil || isNil(o.Ratings) {
		var ret Ratings
		return ret
	}
	return *o.Ratings
}

// GetRatingsOk returns a tuple with the Ratings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetRatingsOk() (*Ratings, bool) {
	if o == nil || isNil(o.Ratings) {
    return nil, false
	}
	return o.Ratings, true
}

// HasRatings returns a boolean if a field has been set.
func (o *MovieResource) HasRatings() bool {
	if o != nil && !isNil(o.Ratings) {
		return true
	}

	return false
}

// SetRatings gets a reference to the given Ratings and assigns it to the Ratings field.
func (o *MovieResource) SetRatings(v Ratings) {
	o.Ratings = &v
}

// GetMovieFile returns the MovieFile field value if set, zero value otherwise.
func (o *MovieResource) GetMovieFile() MovieFileResource {
	if o == nil || isNil(o.MovieFile) {
		var ret MovieFileResource
		return ret
	}
	return *o.MovieFile
}

// GetMovieFileOk returns a tuple with the MovieFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetMovieFileOk() (*MovieFileResource, bool) {
	if o == nil || isNil(o.MovieFile) {
    return nil, false
	}
	return o.MovieFile, true
}

// HasMovieFile returns a boolean if a field has been set.
func (o *MovieResource) HasMovieFile() bool {
	if o != nil && !isNil(o.MovieFile) {
		return true
	}

	return false
}

// SetMovieFile gets a reference to the given MovieFileResource and assigns it to the MovieFile field.
func (o *MovieResource) SetMovieFile(v MovieFileResource) {
	o.MovieFile = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *MovieResource) GetCollection() MovieCollectionResource {
	if o == nil || isNil(o.Collection) {
		var ret MovieCollectionResource
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetCollectionOk() (*MovieCollectionResource, bool) {
	if o == nil || isNil(o.Collection) {
    return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *MovieResource) HasCollection() bool {
	if o != nil && !isNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given MovieCollectionResource and assigns it to the Collection field.
func (o *MovieResource) SetCollection(v MovieCollectionResource) {
	o.Collection = &v
}

// GetPopularity returns the Popularity field value if set, zero value otherwise.
func (o *MovieResource) GetPopularity() float32 {
	if o == nil || isNil(o.Popularity) {
		var ret float32
		return ret
	}
	return *o.Popularity
}

// GetPopularityOk returns a tuple with the Popularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieResource) GetPopularityOk() (*float32, bool) {
	if o == nil || isNil(o.Popularity) {
    return nil, false
	}
	return o.Popularity, true
}

// HasPopularity returns a boolean if a field has been set.
func (o *MovieResource) HasPopularity() bool {
	if o != nil && !isNil(o.Popularity) {
		return true
	}

	return false
}

// SetPopularity gets a reference to the given float32 and assigns it to the Popularity field.
func (o *MovieResource) SetPopularity(v float32) {
	o.Popularity = &v
}

func (o MovieResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.OriginalTitle.IsSet() {
		toSerialize["originalTitle"] = o.OriginalTitle.Get()
	}
	if !isNil(o.OriginalLanguage) {
		toSerialize["originalLanguage"] = o.OriginalLanguage
	}
	if o.AlternateTitles != nil {
		toSerialize["alternateTitles"] = o.AlternateTitles
	}
	if o.SecondaryYear.IsSet() {
		toSerialize["secondaryYear"] = o.SecondaryYear.Get()
	}
	if !isNil(o.SecondaryYearSourceId) {
		toSerialize["secondaryYearSourceId"] = o.SecondaryYearSourceId
	}
	if o.SortTitle.IsSet() {
		toSerialize["sortTitle"] = o.SortTitle.Get()
	}
	if o.SizeOnDisk.IsSet() {
		toSerialize["sizeOnDisk"] = o.SizeOnDisk.Get()
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.Overview.IsSet() {
		toSerialize["overview"] = o.Overview.Get()
	}
	if o.InCinemas.IsSet() {
		toSerialize["inCinemas"] = o.InCinemas.Get()
	}
	if o.PhysicalRelease.IsSet() {
		toSerialize["physicalRelease"] = o.PhysicalRelease.Get()
	}
	if o.DigitalRelease.IsSet() {
		toSerialize["digitalRelease"] = o.DigitalRelease.Get()
	}
	if o.PhysicalReleaseNote.IsSet() {
		toSerialize["physicalReleaseNote"] = o.PhysicalReleaseNote.Get()
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if o.RemotePoster.IsSet() {
		toSerialize["remotePoster"] = o.RemotePoster.Get()
	}
	if !isNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !isNil(o.HasFile) {
		toSerialize["hasFile"] = o.HasFile
	}
	if o.YouTubeTrailerId.IsSet() {
		toSerialize["youTubeTrailerId"] = o.YouTubeTrailerId.Get()
	}
	if o.Studio.IsSet() {
		toSerialize["studio"] = o.Studio.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if !isNil(o.QualityProfileId) {
		toSerialize["qualityProfileId"] = o.QualityProfileId
	}
	if !isNil(o.Monitored) {
		toSerialize["monitored"] = o.Monitored
	}
	if !isNil(o.MinimumAvailability) {
		toSerialize["minimumAvailability"] = o.MinimumAvailability
	}
	if !isNil(o.IsAvailable) {
		toSerialize["isAvailable"] = o.IsAvailable
	}
	if o.FolderName.IsSet() {
		toSerialize["folderName"] = o.FolderName.Get()
	}
	if !isNil(o.Runtime) {
		toSerialize["runtime"] = o.Runtime
	}
	if o.CleanTitle.IsSet() {
		toSerialize["cleanTitle"] = o.CleanTitle.Get()
	}
	if o.ImdbId.IsSet() {
		toSerialize["imdbId"] = o.ImdbId.Get()
	}
	if !isNil(o.TmdbId) {
		toSerialize["tmdbId"] = o.TmdbId
	}
	if o.TitleSlug.IsSet() {
		toSerialize["titleSlug"] = o.TitleSlug.Get()
	}
	if o.RootFolderPath.IsSet() {
		toSerialize["rootFolderPath"] = o.RootFolderPath.Get()
	}
	if o.Folder.IsSet() {
		toSerialize["folder"] = o.Folder.Get()
	}
	if o.Certification.IsSet() {
		toSerialize["certification"] = o.Certification.Get()
	}
	if o.Genres != nil {
		toSerialize["genres"] = o.Genres
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.Added) {
		toSerialize["added"] = o.Added
	}
	if !isNil(o.AddOptions) {
		toSerialize["addOptions"] = o.AddOptions
	}
	if !isNil(o.Ratings) {
		toSerialize["ratings"] = o.Ratings
	}
	if !isNil(o.MovieFile) {
		toSerialize["movieFile"] = o.MovieFile
	}
	if !isNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	if !isNil(o.Popularity) {
		toSerialize["popularity"] = o.Popularity
	}
	return json.Marshal(toSerialize)
}

type NullableMovieResource struct {
	value *MovieResource
	isSet bool
}

func (v NullableMovieResource) Get() *MovieResource {
	return v.value
}

func (v *NullableMovieResource) Set(val *MovieResource) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieResource) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieResource(val *MovieResource) *NullableMovieResource {
	return &NullableMovieResource{value: val, isSet: true}
}

func (v NullableMovieResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


