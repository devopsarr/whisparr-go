/*
Whisparr

Whisparr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// Ratings struct for Ratings
type Ratings struct {
	Imdb *RatingChild `json:"imdb,omitempty"`
	Tmdb *RatingChild `json:"tmdb,omitempty"`
	Metacritic *RatingChild `json:"metacritic,omitempty"`
	RottenTomatoes *RatingChild `json:"rottenTomatoes,omitempty"`
}

// NewRatings instantiates a new Ratings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatings() *Ratings {
	this := Ratings{}
	return &this
}

// NewRatingsWithDefaults instantiates a new Ratings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingsWithDefaults() *Ratings {
	this := Ratings{}
	return &this
}

// GetImdb returns the Imdb field value if set, zero value otherwise.
func (o *Ratings) GetImdb() RatingChild {
	if o == nil || isNil(o.Imdb) {
		var ret RatingChild
		return ret
	}
	return *o.Imdb
}

// GetImdbOk returns a tuple with the Imdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ratings) GetImdbOk() (*RatingChild, bool) {
	if o == nil || isNil(o.Imdb) {
    return nil, false
	}
	return o.Imdb, true
}

// HasImdb returns a boolean if a field has been set.
func (o *Ratings) HasImdb() bool {
	if o != nil && !isNil(o.Imdb) {
		return true
	}

	return false
}

// SetImdb gets a reference to the given RatingChild and assigns it to the Imdb field.
func (o *Ratings) SetImdb(v RatingChild) {
	o.Imdb = &v
}

// GetTmdb returns the Tmdb field value if set, zero value otherwise.
func (o *Ratings) GetTmdb() RatingChild {
	if o == nil || isNil(o.Tmdb) {
		var ret RatingChild
		return ret
	}
	return *o.Tmdb
}

// GetTmdbOk returns a tuple with the Tmdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ratings) GetTmdbOk() (*RatingChild, bool) {
	if o == nil || isNil(o.Tmdb) {
    return nil, false
	}
	return o.Tmdb, true
}

// HasTmdb returns a boolean if a field has been set.
func (o *Ratings) HasTmdb() bool {
	if o != nil && !isNil(o.Tmdb) {
		return true
	}

	return false
}

// SetTmdb gets a reference to the given RatingChild and assigns it to the Tmdb field.
func (o *Ratings) SetTmdb(v RatingChild) {
	o.Tmdb = &v
}

// GetMetacritic returns the Metacritic field value if set, zero value otherwise.
func (o *Ratings) GetMetacritic() RatingChild {
	if o == nil || isNil(o.Metacritic) {
		var ret RatingChild
		return ret
	}
	return *o.Metacritic
}

// GetMetacriticOk returns a tuple with the Metacritic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ratings) GetMetacriticOk() (*RatingChild, bool) {
	if o == nil || isNil(o.Metacritic) {
    return nil, false
	}
	return o.Metacritic, true
}

// HasMetacritic returns a boolean if a field has been set.
func (o *Ratings) HasMetacritic() bool {
	if o != nil && !isNil(o.Metacritic) {
		return true
	}

	return false
}

// SetMetacritic gets a reference to the given RatingChild and assigns it to the Metacritic field.
func (o *Ratings) SetMetacritic(v RatingChild) {
	o.Metacritic = &v
}

// GetRottenTomatoes returns the RottenTomatoes field value if set, zero value otherwise.
func (o *Ratings) GetRottenTomatoes() RatingChild {
	if o == nil || isNil(o.RottenTomatoes) {
		var ret RatingChild
		return ret
	}
	return *o.RottenTomatoes
}

// GetRottenTomatoesOk returns a tuple with the RottenTomatoes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ratings) GetRottenTomatoesOk() (*RatingChild, bool) {
	if o == nil || isNil(o.RottenTomatoes) {
    return nil, false
	}
	return o.RottenTomatoes, true
}

// HasRottenTomatoes returns a boolean if a field has been set.
func (o *Ratings) HasRottenTomatoes() bool {
	if o != nil && !isNil(o.RottenTomatoes) {
		return true
	}

	return false
}

// SetRottenTomatoes gets a reference to the given RatingChild and assigns it to the RottenTomatoes field.
func (o *Ratings) SetRottenTomatoes(v RatingChild) {
	o.RottenTomatoes = &v
}

func (o Ratings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Imdb) {
		toSerialize["imdb"] = o.Imdb
	}
	if !isNil(o.Tmdb) {
		toSerialize["tmdb"] = o.Tmdb
	}
	if !isNil(o.Metacritic) {
		toSerialize["metacritic"] = o.Metacritic
	}
	if !isNil(o.RottenTomatoes) {
		toSerialize["rottenTomatoes"] = o.RottenTomatoes
	}
	return json.Marshal(toSerialize)
}

type NullableRatings struct {
	value *Ratings
	isSet bool
}

func (v NullableRatings) Get() *Ratings {
	return v.value
}

func (v *NullableRatings) Set(val *Ratings) {
	v.value = val
	v.isSet = true
}

func (v NullableRatings) IsSet() bool {
	return v.isSet
}

func (v *NullableRatings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatings(val *Ratings) *NullableRatings {
	return &NullableRatings{value: val, isSet: true}
}

func (v NullableRatings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


