/*
Whisparr

Whisparr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// LocalizationResource struct for LocalizationResource
type LocalizationResource struct {
	Id *int32 `json:"id,omitempty"`
	Strings map[string]string `json:"strings,omitempty"`
}

// NewLocalizationResource instantiates a new LocalizationResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalizationResource() *LocalizationResource {
	this := LocalizationResource{}
	return &this
}

// NewLocalizationResourceWithDefaults instantiates a new LocalizationResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalizationResourceWithDefaults() *LocalizationResource {
	this := LocalizationResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LocalizationResource) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalizationResource) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LocalizationResource) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *LocalizationResource) SetId(v int32) {
	o.Id = &v
}

// GetStrings returns the Strings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocalizationResource) GetStrings() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Strings
}

// GetStringsOk returns a tuple with the Strings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocalizationResource) GetStringsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Strings) {
    return nil, false
	}
	return &o.Strings, true
}

// HasStrings returns a boolean if a field has been set.
func (o *LocalizationResource) HasStrings() bool {
	if o != nil && isNil(o.Strings) {
		return true
	}

	return false
}

// SetStrings gets a reference to the given map[string]string and assigns it to the Strings field.
func (o *LocalizationResource) SetStrings(v map[string]string) {
	o.Strings = v
}

func (o LocalizationResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Strings != nil {
		toSerialize["strings"] = o.Strings
	}
	return json.Marshal(toSerialize)
}

type NullableLocalizationResource struct {
	value *LocalizationResource
	isSet bool
}

func (v NullableLocalizationResource) Get() *LocalizationResource {
	return v.value
}

func (v *NullableLocalizationResource) Set(val *LocalizationResource) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalizationResource) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalizationResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalizationResource(val *LocalizationResource) *NullableLocalizationResource {
	return &NullableLocalizationResource{value: val, isSet: true}
}

func (v NullableLocalizationResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalizationResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


