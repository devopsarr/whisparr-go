/*
Radarr

Radarr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// IndexerResource struct for IndexerResource
type IndexerResource struct {
	Id *int32 `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Fields []*Field `json:"fields,omitempty"`
	ImplementationName NullableString `json:"implementationName,omitempty"`
	Implementation NullableString `json:"implementation,omitempty"`
	ConfigContract NullableString `json:"configContract,omitempty"`
	InfoLink NullableString `json:"infoLink,omitempty"`
	Message *ProviderMessage `json:"message,omitempty"`
	Tags []*int32 `json:"tags,omitempty"`
	Presets []*IndexerResource `json:"presets,omitempty"`
	EnableRss *bool `json:"enableRss,omitempty"`
	EnableAutomaticSearch *bool `json:"enableAutomaticSearch,omitempty"`
	EnableInteractiveSearch *bool `json:"enableInteractiveSearch,omitempty"`
	SupportsRss *bool `json:"supportsRss,omitempty"`
	SupportsSearch *bool `json:"supportsSearch,omitempty"`
	Protocol *DownloadProtocol `json:"protocol,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	DownloadClientId *int32 `json:"downloadClientId,omitempty"`
}

// NewIndexerResource instantiates a new IndexerResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexerResource() *IndexerResource {
	this := IndexerResource{}
	return &this
}

// NewIndexerResourceWithDefaults instantiates a new IndexerResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexerResourceWithDefaults() *IndexerResource {
	this := IndexerResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IndexerResource) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IndexerResource) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IndexerResource) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *IndexerResource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *IndexerResource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *IndexerResource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *IndexerResource) UnsetName() {
	o.Name.Unset()
}

// GetFields returns the Fields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetFields() []*Field {
	if o == nil {
		var ret []*Field
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetFieldsOk() ([]*Field, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *IndexerResource) HasFields() bool {
	if o != nil && isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []Field and assigns it to the Fields field.
func (o *IndexerResource) SetFields(v []*Field) {
	o.Fields = v
}

// GetImplementationName returns the ImplementationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetImplementationName() string {
	if o == nil || isNil(o.ImplementationName.Get()) {
		var ret string
		return ret
	}
	return *o.ImplementationName.Get()
}

// GetImplementationNameOk returns a tuple with the ImplementationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetImplementationNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ImplementationName.Get(), o.ImplementationName.IsSet()
}

// HasImplementationName returns a boolean if a field has been set.
func (o *IndexerResource) HasImplementationName() bool {
	if o != nil && o.ImplementationName.IsSet() {
		return true
	}

	return false
}

// SetImplementationName gets a reference to the given NullableString and assigns it to the ImplementationName field.
func (o *IndexerResource) SetImplementationName(v string) {
	o.ImplementationName.Set(&v)
}
// SetImplementationNameNil sets the value for ImplementationName to be an explicit nil
func (o *IndexerResource) SetImplementationNameNil() {
	o.ImplementationName.Set(nil)
}

// UnsetImplementationName ensures that no value is present for ImplementationName, not even an explicit nil
func (o *IndexerResource) UnsetImplementationName() {
	o.ImplementationName.Unset()
}

// GetImplementation returns the Implementation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetImplementation() string {
	if o == nil || isNil(o.Implementation.Get()) {
		var ret string
		return ret
	}
	return *o.Implementation.Get()
}

// GetImplementationOk returns a tuple with the Implementation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetImplementationOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Implementation.Get(), o.Implementation.IsSet()
}

// HasImplementation returns a boolean if a field has been set.
func (o *IndexerResource) HasImplementation() bool {
	if o != nil && o.Implementation.IsSet() {
		return true
	}

	return false
}

// SetImplementation gets a reference to the given NullableString and assigns it to the Implementation field.
func (o *IndexerResource) SetImplementation(v string) {
	o.Implementation.Set(&v)
}
// SetImplementationNil sets the value for Implementation to be an explicit nil
func (o *IndexerResource) SetImplementationNil() {
	o.Implementation.Set(nil)
}

// UnsetImplementation ensures that no value is present for Implementation, not even an explicit nil
func (o *IndexerResource) UnsetImplementation() {
	o.Implementation.Unset()
}

// GetConfigContract returns the ConfigContract field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetConfigContract() string {
	if o == nil || isNil(o.ConfigContract.Get()) {
		var ret string
		return ret
	}
	return *o.ConfigContract.Get()
}

// GetConfigContractOk returns a tuple with the ConfigContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetConfigContractOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ConfigContract.Get(), o.ConfigContract.IsSet()
}

// HasConfigContract returns a boolean if a field has been set.
func (o *IndexerResource) HasConfigContract() bool {
	if o != nil && o.ConfigContract.IsSet() {
		return true
	}

	return false
}

// SetConfigContract gets a reference to the given NullableString and assigns it to the ConfigContract field.
func (o *IndexerResource) SetConfigContract(v string) {
	o.ConfigContract.Set(&v)
}
// SetConfigContractNil sets the value for ConfigContract to be an explicit nil
func (o *IndexerResource) SetConfigContractNil() {
	o.ConfigContract.Set(nil)
}

// UnsetConfigContract ensures that no value is present for ConfigContract, not even an explicit nil
func (o *IndexerResource) UnsetConfigContract() {
	o.ConfigContract.Unset()
}

// GetInfoLink returns the InfoLink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetInfoLink() string {
	if o == nil || isNil(o.InfoLink.Get()) {
		var ret string
		return ret
	}
	return *o.InfoLink.Get()
}

// GetInfoLinkOk returns a tuple with the InfoLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetInfoLinkOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.InfoLink.Get(), o.InfoLink.IsSet()
}

// HasInfoLink returns a boolean if a field has been set.
func (o *IndexerResource) HasInfoLink() bool {
	if o != nil && o.InfoLink.IsSet() {
		return true
	}

	return false
}

// SetInfoLink gets a reference to the given NullableString and assigns it to the InfoLink field.
func (o *IndexerResource) SetInfoLink(v string) {
	o.InfoLink.Set(&v)
}
// SetInfoLinkNil sets the value for InfoLink to be an explicit nil
func (o *IndexerResource) SetInfoLinkNil() {
	o.InfoLink.Set(nil)
}

// UnsetInfoLink ensures that no value is present for InfoLink, not even an explicit nil
func (o *IndexerResource) UnsetInfoLink() {
	o.InfoLink.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IndexerResource) GetMessage() ProviderMessage {
	if o == nil || isNil(o.Message) {
		var ret ProviderMessage
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetMessageOk() (*ProviderMessage, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IndexerResource) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given ProviderMessage and assigns it to the Message field.
func (o *IndexerResource) SetMessage(v ProviderMessage) {
	o.Message = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetTags() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetTagsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *IndexerResource) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *IndexerResource) SetTags(v []*int32) {
	o.Tags = v
}

// GetPresets returns the Presets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexerResource) GetPresets() []*IndexerResource {
	if o == nil {
		var ret []*IndexerResource
		return ret
	}
	return o.Presets
}

// GetPresetsOk returns a tuple with the Presets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexerResource) GetPresetsOk() ([]*IndexerResource, bool) {
	if o == nil || isNil(o.Presets) {
    return nil, false
	}
	return o.Presets, true
}

// HasPresets returns a boolean if a field has been set.
func (o *IndexerResource) HasPresets() bool {
	if o != nil && isNil(o.Presets) {
		return true
	}

	return false
}

// SetPresets gets a reference to the given []IndexerResource and assigns it to the Presets field.
func (o *IndexerResource) SetPresets(v []*IndexerResource) {
	o.Presets = v
}

// GetEnableRss returns the EnableRss field value if set, zero value otherwise.
func (o *IndexerResource) GetEnableRss() bool {
	if o == nil || isNil(o.EnableRss) {
		var ret bool
		return ret
	}
	return *o.EnableRss
}

// GetEnableRssOk returns a tuple with the EnableRss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetEnableRssOk() (*bool, bool) {
	if o == nil || isNil(o.EnableRss) {
    return nil, false
	}
	return o.EnableRss, true
}

// HasEnableRss returns a boolean if a field has been set.
func (o *IndexerResource) HasEnableRss() bool {
	if o != nil && !isNil(o.EnableRss) {
		return true
	}

	return false
}

// SetEnableRss gets a reference to the given bool and assigns it to the EnableRss field.
func (o *IndexerResource) SetEnableRss(v bool) {
	o.EnableRss = &v
}

// GetEnableAutomaticSearch returns the EnableAutomaticSearch field value if set, zero value otherwise.
func (o *IndexerResource) GetEnableAutomaticSearch() bool {
	if o == nil || isNil(o.EnableAutomaticSearch) {
		var ret bool
		return ret
	}
	return *o.EnableAutomaticSearch
}

// GetEnableAutomaticSearchOk returns a tuple with the EnableAutomaticSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetEnableAutomaticSearchOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAutomaticSearch) {
    return nil, false
	}
	return o.EnableAutomaticSearch, true
}

// HasEnableAutomaticSearch returns a boolean if a field has been set.
func (o *IndexerResource) HasEnableAutomaticSearch() bool {
	if o != nil && !isNil(o.EnableAutomaticSearch) {
		return true
	}

	return false
}

// SetEnableAutomaticSearch gets a reference to the given bool and assigns it to the EnableAutomaticSearch field.
func (o *IndexerResource) SetEnableAutomaticSearch(v bool) {
	o.EnableAutomaticSearch = &v
}

// GetEnableInteractiveSearch returns the EnableInteractiveSearch field value if set, zero value otherwise.
func (o *IndexerResource) GetEnableInteractiveSearch() bool {
	if o == nil || isNil(o.EnableInteractiveSearch) {
		var ret bool
		return ret
	}
	return *o.EnableInteractiveSearch
}

// GetEnableInteractiveSearchOk returns a tuple with the EnableInteractiveSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetEnableInteractiveSearchOk() (*bool, bool) {
	if o == nil || isNil(o.EnableInteractiveSearch) {
    return nil, false
	}
	return o.EnableInteractiveSearch, true
}

// HasEnableInteractiveSearch returns a boolean if a field has been set.
func (o *IndexerResource) HasEnableInteractiveSearch() bool {
	if o != nil && !isNil(o.EnableInteractiveSearch) {
		return true
	}

	return false
}

// SetEnableInteractiveSearch gets a reference to the given bool and assigns it to the EnableInteractiveSearch field.
func (o *IndexerResource) SetEnableInteractiveSearch(v bool) {
	o.EnableInteractiveSearch = &v
}

// GetSupportsRss returns the SupportsRss field value if set, zero value otherwise.
func (o *IndexerResource) GetSupportsRss() bool {
	if o == nil || isNil(o.SupportsRss) {
		var ret bool
		return ret
	}
	return *o.SupportsRss
}

// GetSupportsRssOk returns a tuple with the SupportsRss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetSupportsRssOk() (*bool, bool) {
	if o == nil || isNil(o.SupportsRss) {
    return nil, false
	}
	return o.SupportsRss, true
}

// HasSupportsRss returns a boolean if a field has been set.
func (o *IndexerResource) HasSupportsRss() bool {
	if o != nil && !isNil(o.SupportsRss) {
		return true
	}

	return false
}

// SetSupportsRss gets a reference to the given bool and assigns it to the SupportsRss field.
func (o *IndexerResource) SetSupportsRss(v bool) {
	o.SupportsRss = &v
}

// GetSupportsSearch returns the SupportsSearch field value if set, zero value otherwise.
func (o *IndexerResource) GetSupportsSearch() bool {
	if o == nil || isNil(o.SupportsSearch) {
		var ret bool
		return ret
	}
	return *o.SupportsSearch
}

// GetSupportsSearchOk returns a tuple with the SupportsSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetSupportsSearchOk() (*bool, bool) {
	if o == nil || isNil(o.SupportsSearch) {
    return nil, false
	}
	return o.SupportsSearch, true
}

// HasSupportsSearch returns a boolean if a field has been set.
func (o *IndexerResource) HasSupportsSearch() bool {
	if o != nil && !isNil(o.SupportsSearch) {
		return true
	}

	return false
}

// SetSupportsSearch gets a reference to the given bool and assigns it to the SupportsSearch field.
func (o *IndexerResource) SetSupportsSearch(v bool) {
	o.SupportsSearch = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *IndexerResource) GetProtocol() DownloadProtocol {
	if o == nil || isNil(o.Protocol) {
		var ret DownloadProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetProtocolOk() (*DownloadProtocol, bool) {
	if o == nil || isNil(o.Protocol) {
    return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *IndexerResource) HasProtocol() bool {
	if o != nil && !isNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given DownloadProtocol and assigns it to the Protocol field.
func (o *IndexerResource) SetProtocol(v DownloadProtocol) {
	o.Protocol = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *IndexerResource) GetPriority() int32 {
	if o == nil || isNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetPriorityOk() (*int32, bool) {
	if o == nil || isNil(o.Priority) {
    return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *IndexerResource) HasPriority() bool {
	if o != nil && !isNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *IndexerResource) SetPriority(v int32) {
	o.Priority = &v
}

// GetDownloadClientId returns the DownloadClientId field value if set, zero value otherwise.
func (o *IndexerResource) GetDownloadClientId() int32 {
	if o == nil || isNil(o.DownloadClientId) {
		var ret int32
		return ret
	}
	return *o.DownloadClientId
}

// GetDownloadClientIdOk returns a tuple with the DownloadClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexerResource) GetDownloadClientIdOk() (*int32, bool) {
	if o == nil || isNil(o.DownloadClientId) {
    return nil, false
	}
	return o.DownloadClientId, true
}

// HasDownloadClientId returns a boolean if a field has been set.
func (o *IndexerResource) HasDownloadClientId() bool {
	if o != nil && !isNil(o.DownloadClientId) {
		return true
	}

	return false
}

// SetDownloadClientId gets a reference to the given int32 and assigns it to the DownloadClientId field.
func (o *IndexerResource) SetDownloadClientId(v int32) {
	o.DownloadClientId = &v
}

func (o IndexerResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.ImplementationName.IsSet() {
		toSerialize["implementationName"] = o.ImplementationName.Get()
	}
	if o.Implementation.IsSet() {
		toSerialize["implementation"] = o.Implementation.Get()
	}
	if o.ConfigContract.IsSet() {
		toSerialize["configContract"] = o.ConfigContract.Get()
	}
	if o.InfoLink.IsSet() {
		toSerialize["infoLink"] = o.InfoLink.Get()
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Presets != nil {
		toSerialize["presets"] = o.Presets
	}
	if !isNil(o.EnableRss) {
		toSerialize["enableRss"] = o.EnableRss
	}
	if !isNil(o.EnableAutomaticSearch) {
		toSerialize["enableAutomaticSearch"] = o.EnableAutomaticSearch
	}
	if !isNil(o.EnableInteractiveSearch) {
		toSerialize["enableInteractiveSearch"] = o.EnableInteractiveSearch
	}
	if !isNil(o.SupportsRss) {
		toSerialize["supportsRss"] = o.SupportsRss
	}
	if !isNil(o.SupportsSearch) {
		toSerialize["supportsSearch"] = o.SupportsSearch
	}
	if !isNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !isNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !isNil(o.DownloadClientId) {
		toSerialize["downloadClientId"] = o.DownloadClientId
	}
	return json.Marshal(toSerialize)
}

type NullableIndexerResource struct {
	value *IndexerResource
	isSet bool
}

func (v NullableIndexerResource) Get() *IndexerResource {
	return v.value
}

func (v *NullableIndexerResource) Set(val *IndexerResource) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexerResource) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexerResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexerResource(val *IndexerResource) *NullableIndexerResource {
	return &NullableIndexerResource{value: val, isSet: true}
}

func (v NullableIndexerResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexerResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


