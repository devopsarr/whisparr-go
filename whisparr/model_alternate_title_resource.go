/*
Whisparr

Whisparr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// AlternateTitleResource struct for AlternateTitleResource
type AlternateTitleResource struct {
	Title NullableString `json:"title,omitempty"`
	SeasonNumber NullableInt32 `json:"seasonNumber,omitempty"`
	SceneSeasonNumber NullableInt32 `json:"sceneSeasonNumber,omitempty"`
	SceneOrigin NullableString `json:"sceneOrigin,omitempty"`
	Comment NullableString `json:"comment,omitempty"`
}

// NewAlternateTitleResource instantiates a new AlternateTitleResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlternateTitleResource() *AlternateTitleResource {
	this := AlternateTitleResource{}
	return &this
}

// NewAlternateTitleResourceWithDefaults instantiates a new AlternateTitleResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlternateTitleResourceWithDefaults() *AlternateTitleResource {
	this := AlternateTitleResource{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlternateTitleResource) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlternateTitleResource) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *AlternateTitleResource) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *AlternateTitleResource) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *AlternateTitleResource) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *AlternateTitleResource) UnsetTitle() {
	o.Title.Unset()
}

// GetSeasonNumber returns the SeasonNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlternateTitleResource) GetSeasonNumber() int32 {
	if o == nil || isNil(o.SeasonNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SeasonNumber.Get()
}

// GetSeasonNumberOk returns a tuple with the SeasonNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlternateTitleResource) GetSeasonNumberOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.SeasonNumber.Get(), o.SeasonNumber.IsSet()
}

// HasSeasonNumber returns a boolean if a field has been set.
func (o *AlternateTitleResource) HasSeasonNumber() bool {
	if o != nil && o.SeasonNumber.IsSet() {
		return true
	}

	return false
}

// SetSeasonNumber gets a reference to the given NullableInt32 and assigns it to the SeasonNumber field.
func (o *AlternateTitleResource) SetSeasonNumber(v int32) {
	o.SeasonNumber.Set(&v)
}
// SetSeasonNumberNil sets the value for SeasonNumber to be an explicit nil
func (o *AlternateTitleResource) SetSeasonNumberNil() {
	o.SeasonNumber.Set(nil)
}

// UnsetSeasonNumber ensures that no value is present for SeasonNumber, not even an explicit nil
func (o *AlternateTitleResource) UnsetSeasonNumber() {
	o.SeasonNumber.Unset()
}

// GetSceneSeasonNumber returns the SceneSeasonNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlternateTitleResource) GetSceneSeasonNumber() int32 {
	if o == nil || isNil(o.SceneSeasonNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SceneSeasonNumber.Get()
}

// GetSceneSeasonNumberOk returns a tuple with the SceneSeasonNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlternateTitleResource) GetSceneSeasonNumberOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return o.SceneSeasonNumber.Get(), o.SceneSeasonNumber.IsSet()
}

// HasSceneSeasonNumber returns a boolean if a field has been set.
func (o *AlternateTitleResource) HasSceneSeasonNumber() bool {
	if o != nil && o.SceneSeasonNumber.IsSet() {
		return true
	}

	return false
}

// SetSceneSeasonNumber gets a reference to the given NullableInt32 and assigns it to the SceneSeasonNumber field.
func (o *AlternateTitleResource) SetSceneSeasonNumber(v int32) {
	o.SceneSeasonNumber.Set(&v)
}
// SetSceneSeasonNumberNil sets the value for SceneSeasonNumber to be an explicit nil
func (o *AlternateTitleResource) SetSceneSeasonNumberNil() {
	o.SceneSeasonNumber.Set(nil)
}

// UnsetSceneSeasonNumber ensures that no value is present for SceneSeasonNumber, not even an explicit nil
func (o *AlternateTitleResource) UnsetSceneSeasonNumber() {
	o.SceneSeasonNumber.Unset()
}

// GetSceneOrigin returns the SceneOrigin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlternateTitleResource) GetSceneOrigin() string {
	if o == nil || isNil(o.SceneOrigin.Get()) {
		var ret string
		return ret
	}
	return *o.SceneOrigin.Get()
}

// GetSceneOriginOk returns a tuple with the SceneOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlternateTitleResource) GetSceneOriginOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SceneOrigin.Get(), o.SceneOrigin.IsSet()
}

// HasSceneOrigin returns a boolean if a field has been set.
func (o *AlternateTitleResource) HasSceneOrigin() bool {
	if o != nil && o.SceneOrigin.IsSet() {
		return true
	}

	return false
}

// SetSceneOrigin gets a reference to the given NullableString and assigns it to the SceneOrigin field.
func (o *AlternateTitleResource) SetSceneOrigin(v string) {
	o.SceneOrigin.Set(&v)
}
// SetSceneOriginNil sets the value for SceneOrigin to be an explicit nil
func (o *AlternateTitleResource) SetSceneOriginNil() {
	o.SceneOrigin.Set(nil)
}

// UnsetSceneOrigin ensures that no value is present for SceneOrigin, not even an explicit nil
func (o *AlternateTitleResource) UnsetSceneOrigin() {
	o.SceneOrigin.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlternateTitleResource) GetComment() string {
	if o == nil || isNil(o.Comment.Get()) {
		var ret string
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlternateTitleResource) GetCommentOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *AlternateTitleResource) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableString and assigns it to the Comment field.
func (o *AlternateTitleResource) SetComment(v string) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *AlternateTitleResource) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *AlternateTitleResource) UnsetComment() {
	o.Comment.Unset()
}

func (o AlternateTitleResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.SeasonNumber.IsSet() {
		toSerialize["seasonNumber"] = o.SeasonNumber.Get()
	}
	if o.SceneSeasonNumber.IsSet() {
		toSerialize["sceneSeasonNumber"] = o.SceneSeasonNumber.Get()
	}
	if o.SceneOrigin.IsSet() {
		toSerialize["sceneOrigin"] = o.SceneOrigin.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAlternateTitleResource struct {
	value *AlternateTitleResource
	isSet bool
}

func (v NullableAlternateTitleResource) Get() *AlternateTitleResource {
	return v.value
}

func (v *NullableAlternateTitleResource) Set(val *AlternateTitleResource) {
	v.value = val
	v.isSet = true
}

func (v NullableAlternateTitleResource) IsSet() bool {
	return v.isSet
}

func (v *NullableAlternateTitleResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlternateTitleResource(val *AlternateTitleResource) *NullableAlternateTitleResource {
	return &NullableAlternateTitleResource{value: val, isSet: true}
}

func (v NullableAlternateTitleResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlternateTitleResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


