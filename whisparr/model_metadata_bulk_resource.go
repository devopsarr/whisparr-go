/*
Radarr

Radarr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// MetadataBulkResource struct for MetadataBulkResource
type MetadataBulkResource struct {
	Ids []*int32 `json:"ids,omitempty"`
	Tags []*int32 `json:"tags,omitempty"`
	ApplyTags *ApplyTags `json:"applyTags,omitempty"`
}

// NewMetadataBulkResource instantiates a new MetadataBulkResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataBulkResource() *MetadataBulkResource {
	this := MetadataBulkResource{}
	return &this
}

// NewMetadataBulkResourceWithDefaults instantiates a new MetadataBulkResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataBulkResourceWithDefaults() *MetadataBulkResource {
	this := MetadataBulkResource{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataBulkResource) GetIds() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataBulkResource) GetIdsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Ids) {
    return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *MetadataBulkResource) HasIds() bool {
	if o != nil && isNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []int32 and assigns it to the Ids field.
func (o *MetadataBulkResource) SetIds(v []*int32) {
	o.Ids = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataBulkResource) GetTags() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataBulkResource) GetTagsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MetadataBulkResource) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *MetadataBulkResource) SetTags(v []*int32) {
	o.Tags = v
}

// GetApplyTags returns the ApplyTags field value if set, zero value otherwise.
func (o *MetadataBulkResource) GetApplyTags() ApplyTags {
	if o == nil || isNil(o.ApplyTags) {
		var ret ApplyTags
		return ret
	}
	return *o.ApplyTags
}

// GetApplyTagsOk returns a tuple with the ApplyTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataBulkResource) GetApplyTagsOk() (*ApplyTags, bool) {
	if o == nil || isNil(o.ApplyTags) {
    return nil, false
	}
	return o.ApplyTags, true
}

// HasApplyTags returns a boolean if a field has been set.
func (o *MetadataBulkResource) HasApplyTags() bool {
	if o != nil && !isNil(o.ApplyTags) {
		return true
	}

	return false
}

// SetApplyTags gets a reference to the given ApplyTags and assigns it to the ApplyTags field.
func (o *MetadataBulkResource) SetApplyTags(v ApplyTags) {
	o.ApplyTags = &v
}

func (o MetadataBulkResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.ApplyTags) {
		toSerialize["applyTags"] = o.ApplyTags
	}
	return json.Marshal(toSerialize)
}

type NullableMetadataBulkResource struct {
	value *MetadataBulkResource
	isSet bool
}

func (v NullableMetadataBulkResource) Get() *MetadataBulkResource {
	return v.value
}

func (v *NullableMetadataBulkResource) Set(val *MetadataBulkResource) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataBulkResource) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataBulkResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataBulkResource(val *MetadataBulkResource) *NullableMetadataBulkResource {
	return &NullableMetadataBulkResource{value: val, isSet: true}
}

func (v NullableMetadataBulkResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataBulkResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


