/*
Radarr

Radarr API docs

API version: b08981dee068e1ed23e4f45a0d8fe70ef7bf7703
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
	"fmt"
)

// AddMovieMethod the model 'AddMovieMethod'
type AddMovieMethod string

// List of AddMovieMethod
const (
	ADDMOVIEMETHOD_MANUAL AddMovieMethod = "manual"
	ADDMOVIEMETHOD_LIST AddMovieMethod = "list"
	ADDMOVIEMETHOD_COLLECTION AddMovieMethod = "collection"
)

// All allowed values of AddMovieMethod enum
var AllowedAddMovieMethodEnumValues = []AddMovieMethod{
	"manual",
	"list",
	"collection",
}

func (v *AddMovieMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddMovieMethod(value)
	for _, existing := range AllowedAddMovieMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddMovieMethod", value)
}

// NewAddMovieMethodFromValue returns a pointer to a valid AddMovieMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddMovieMethodFromValue(v string) (*AddMovieMethod, error) {
	ev := AddMovieMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddMovieMethod: valid values are %v", v, AllowedAddMovieMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddMovieMethod) IsValid() bool {
	for _, existing := range AllowedAddMovieMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddMovieMethod value
func (v AddMovieMethod) Ptr() *AddMovieMethod {
	return &v
}

type NullableAddMovieMethod struct {
	value *AddMovieMethod
	isSet bool
}

func (v NullableAddMovieMethod) Get() *AddMovieMethod {
	return v.value
}

func (v *NullableAddMovieMethod) Set(val *AddMovieMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableAddMovieMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableAddMovieMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddMovieMethod(val *AddMovieMethod) *NullableAddMovieMethod {
	return &NullableAddMovieMethod{value: val, isSet: true}
}

func (v NullableAddMovieMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddMovieMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

