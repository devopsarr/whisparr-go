/*
Radarr

Radarr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
	"fmt"
)

// MovieStatusType the model 'MovieStatusType'
type MovieStatusType string

// List of MovieStatusType
const (
	MOVIESTATUSTYPE_TBA MovieStatusType = "tba"
	MOVIESTATUSTYPE_ANNOUNCED MovieStatusType = "announced"
	MOVIESTATUSTYPE_IN_CINEMAS MovieStatusType = "inCinemas"
	MOVIESTATUSTYPE_RELEASED MovieStatusType = "released"
	MOVIESTATUSTYPE_DELETED MovieStatusType = "deleted"
)

// All allowed values of MovieStatusType enum
var AllowedMovieStatusTypeEnumValues = []MovieStatusType{
	"tba",
	"announced",
	"inCinemas",
	"released",
	"deleted",
}

func (v *MovieStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MovieStatusType(value)
	for _, existing := range AllowedMovieStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MovieStatusType", value)
}

// NewMovieStatusTypeFromValue returns a pointer to a valid MovieStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMovieStatusTypeFromValue(v string) (*MovieStatusType, error) {
	ev := MovieStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MovieStatusType: valid values are %v", v, AllowedMovieStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MovieStatusType) IsValid() bool {
	for _, existing := range AllowedMovieStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MovieStatusType value
func (v MovieStatusType) Ptr() *MovieStatusType {
	return &v
}

type NullableMovieStatusType struct {
	value *MovieStatusType
	isSet bool
}

func (v NullableMovieStatusType) Get() *MovieStatusType {
	return v.value
}

func (v *NullableMovieStatusType) Set(val *MovieStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieStatusType(val *MovieStatusType) *NullableMovieStatusType {
	return &NullableMovieStatusType{value: val, isSet: true}
}

func (v NullableMovieStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

