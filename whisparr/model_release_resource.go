/*
Radarr

Radarr API docs

API version: b08981dee068e1ed23e4f45a0d8fe70ef7bf7703
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
	"time"
)

// checks if the ReleaseResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseResource{}

// ReleaseResource struct for ReleaseResource
type ReleaseResource struct {
	Id *int32 `json:"id,omitempty"`
	Guid NullableString `json:"guid,omitempty"`
	Quality *QualityModel `json:"quality,omitempty"`
	CustomFormats []CustomFormatResource `json:"customFormats,omitempty"`
	CustomFormatScore *int32 `json:"customFormatScore,omitempty"`
	QualityWeight *int32 `json:"qualityWeight,omitempty"`
	Age *int32 `json:"age,omitempty"`
	AgeHours *float64 `json:"ageHours,omitempty"`
	AgeMinutes *float64 `json:"ageMinutes,omitempty"`
	Size *int64 `json:"size,omitempty"`
	IndexerId *int32 `json:"indexerId,omitempty"`
	Indexer NullableString `json:"indexer,omitempty"`
	ReleaseGroup NullableString `json:"releaseGroup,omitempty"`
	SubGroup NullableString `json:"subGroup,omitempty"`
	ReleaseHash NullableString `json:"releaseHash,omitempty"`
	Title NullableString `json:"title,omitempty"`
	SceneSource *bool `json:"sceneSource,omitempty"`
	MovieTitles []string `json:"movieTitles,omitempty"`
	Languages []Language `json:"languages,omitempty"`
	MappedMovieId NullableInt32 `json:"mappedMovieId,omitempty"`
	Approved *bool `json:"approved,omitempty"`
	TemporarilyRejected *bool `json:"temporarilyRejected,omitempty"`
	Rejected *bool `json:"rejected,omitempty"`
	TmdbId *int32 `json:"tmdbId,omitempty"`
	ImdbId *int32 `json:"imdbId,omitempty"`
	Rejections []string `json:"rejections,omitempty"`
	PublishDate *time.Time `json:"publishDate,omitempty"`
	CommentUrl NullableString `json:"commentUrl,omitempty"`
	DownloadUrl NullableString `json:"downloadUrl,omitempty"`
	InfoUrl NullableString `json:"infoUrl,omitempty"`
	DownloadAllowed *bool `json:"downloadAllowed,omitempty"`
	ReleaseWeight *int32 `json:"releaseWeight,omitempty"`
	IndexerFlags []string `json:"indexerFlags,omitempty"`
	Edition NullableString `json:"edition,omitempty"`
	MagnetUrl NullableString `json:"magnetUrl,omitempty"`
	InfoHash NullableString `json:"infoHash,omitempty"`
	Seeders NullableInt32 `json:"seeders,omitempty"`
	Leechers NullableInt32 `json:"leechers,omitempty"`
	Protocol *DownloadProtocol `json:"protocol,omitempty"`
	MovieId NullableInt32 `json:"movieId,omitempty"`
	DownloadClientId NullableInt32 `json:"downloadClientId,omitempty"`
	DownloadClient NullableString `json:"downloadClient,omitempty"`
	ShouldOverride NullableBool `json:"shouldOverride,omitempty"`
}

// NewReleaseResource instantiates a new ReleaseResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseResource() *ReleaseResource {
	this := ReleaseResource{}
	return &this
}

// NewReleaseResourceWithDefaults instantiates a new ReleaseResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseResourceWithDefaults() *ReleaseResource {
	this := ReleaseResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReleaseResource) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReleaseResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ReleaseResource) SetId(v int32) {
	o.Id = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetGuid() string {
	if o == nil || IsNil(o.Guid.Get()) {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *ReleaseResource) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *ReleaseResource) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *ReleaseResource) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *ReleaseResource) UnsetGuid() {
	o.Guid.Unset()
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *ReleaseResource) GetQuality() QualityModel {
	if o == nil || IsNil(o.Quality) {
		var ret QualityModel
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetQualityOk() (*QualityModel, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *ReleaseResource) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given QualityModel and assigns it to the Quality field.
func (o *ReleaseResource) SetQuality(v QualityModel) {
	o.Quality = &v
}

// GetCustomFormats returns the CustomFormats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetCustomFormats() []CustomFormatResource {
	if o == nil {
		var ret []CustomFormatResource
		return ret
	}
	return o.CustomFormats
}

// GetCustomFormatsOk returns a tuple with the CustomFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetCustomFormatsOk() ([]CustomFormatResource, bool) {
	if o == nil || IsNil(o.CustomFormats) {
		return nil, false
	}
	return o.CustomFormats, true
}

// HasCustomFormats returns a boolean if a field has been set.
func (o *ReleaseResource) HasCustomFormats() bool {
	if o != nil && !IsNil(o.CustomFormats) {
		return true
	}

	return false
}

// SetCustomFormats gets a reference to the given []CustomFormatResource and assigns it to the CustomFormats field.
func (o *ReleaseResource) SetCustomFormats(v []CustomFormatResource) {
	o.CustomFormats = v
}

// GetCustomFormatScore returns the CustomFormatScore field value if set, zero value otherwise.
func (o *ReleaseResource) GetCustomFormatScore() int32 {
	if o == nil || IsNil(o.CustomFormatScore) {
		var ret int32
		return ret
	}
	return *o.CustomFormatScore
}

// GetCustomFormatScoreOk returns a tuple with the CustomFormatScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetCustomFormatScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomFormatScore) {
		return nil, false
	}
	return o.CustomFormatScore, true
}

// HasCustomFormatScore returns a boolean if a field has been set.
func (o *ReleaseResource) HasCustomFormatScore() bool {
	if o != nil && !IsNil(o.CustomFormatScore) {
		return true
	}

	return false
}

// SetCustomFormatScore gets a reference to the given int32 and assigns it to the CustomFormatScore field.
func (o *ReleaseResource) SetCustomFormatScore(v int32) {
	o.CustomFormatScore = &v
}

// GetQualityWeight returns the QualityWeight field value if set, zero value otherwise.
func (o *ReleaseResource) GetQualityWeight() int32 {
	if o == nil || IsNil(o.QualityWeight) {
		var ret int32
		return ret
	}
	return *o.QualityWeight
}

// GetQualityWeightOk returns a tuple with the QualityWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetQualityWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.QualityWeight) {
		return nil, false
	}
	return o.QualityWeight, true
}

// HasQualityWeight returns a boolean if a field has been set.
func (o *ReleaseResource) HasQualityWeight() bool {
	if o != nil && !IsNil(o.QualityWeight) {
		return true
	}

	return false
}

// SetQualityWeight gets a reference to the given int32 and assigns it to the QualityWeight field.
func (o *ReleaseResource) SetQualityWeight(v int32) {
	o.QualityWeight = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *ReleaseResource) GetAge() int32 {
	if o == nil || IsNil(o.Age) {
		var ret int32
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *ReleaseResource) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given int32 and assigns it to the Age field.
func (o *ReleaseResource) SetAge(v int32) {
	o.Age = &v
}

// GetAgeHours returns the AgeHours field value if set, zero value otherwise.
func (o *ReleaseResource) GetAgeHours() float64 {
	if o == nil || IsNil(o.AgeHours) {
		var ret float64
		return ret
	}
	return *o.AgeHours
}

// GetAgeHoursOk returns a tuple with the AgeHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetAgeHoursOk() (*float64, bool) {
	if o == nil || IsNil(o.AgeHours) {
		return nil, false
	}
	return o.AgeHours, true
}

// HasAgeHours returns a boolean if a field has been set.
func (o *ReleaseResource) HasAgeHours() bool {
	if o != nil && !IsNil(o.AgeHours) {
		return true
	}

	return false
}

// SetAgeHours gets a reference to the given float64 and assigns it to the AgeHours field.
func (o *ReleaseResource) SetAgeHours(v float64) {
	o.AgeHours = &v
}

// GetAgeMinutes returns the AgeMinutes field value if set, zero value otherwise.
func (o *ReleaseResource) GetAgeMinutes() float64 {
	if o == nil || IsNil(o.AgeMinutes) {
		var ret float64
		return ret
	}
	return *o.AgeMinutes
}

// GetAgeMinutesOk returns a tuple with the AgeMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetAgeMinutesOk() (*float64, bool) {
	if o == nil || IsNil(o.AgeMinutes) {
		return nil, false
	}
	return o.AgeMinutes, true
}

// HasAgeMinutes returns a boolean if a field has been set.
func (o *ReleaseResource) HasAgeMinutes() bool {
	if o != nil && !IsNil(o.AgeMinutes) {
		return true
	}

	return false
}

// SetAgeMinutes gets a reference to the given float64 and assigns it to the AgeMinutes field.
func (o *ReleaseResource) SetAgeMinutes(v float64) {
	o.AgeMinutes = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ReleaseResource) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ReleaseResource) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *ReleaseResource) SetSize(v int64) {
	o.Size = &v
}

// GetIndexerId returns the IndexerId field value if set, zero value otherwise.
func (o *ReleaseResource) GetIndexerId() int32 {
	if o == nil || IsNil(o.IndexerId) {
		var ret int32
		return ret
	}
	return *o.IndexerId
}

// GetIndexerIdOk returns a tuple with the IndexerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetIndexerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IndexerId) {
		return nil, false
	}
	return o.IndexerId, true
}

// HasIndexerId returns a boolean if a field has been set.
func (o *ReleaseResource) HasIndexerId() bool {
	if o != nil && !IsNil(o.IndexerId) {
		return true
	}

	return false
}

// SetIndexerId gets a reference to the given int32 and assigns it to the IndexerId field.
func (o *ReleaseResource) SetIndexerId(v int32) {
	o.IndexerId = &v
}

// GetIndexer returns the Indexer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetIndexer() string {
	if o == nil || IsNil(o.Indexer.Get()) {
		var ret string
		return ret
	}
	return *o.Indexer.Get()
}

// GetIndexerOk returns a tuple with the Indexer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetIndexerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indexer.Get(), o.Indexer.IsSet()
}

// HasIndexer returns a boolean if a field has been set.
func (o *ReleaseResource) HasIndexer() bool {
	if o != nil && o.Indexer.IsSet() {
		return true
	}

	return false
}

// SetIndexer gets a reference to the given NullableString and assigns it to the Indexer field.
func (o *ReleaseResource) SetIndexer(v string) {
	o.Indexer.Set(&v)
}
// SetIndexerNil sets the value for Indexer to be an explicit nil
func (o *ReleaseResource) SetIndexerNil() {
	o.Indexer.Set(nil)
}

// UnsetIndexer ensures that no value is present for Indexer, not even an explicit nil
func (o *ReleaseResource) UnsetIndexer() {
	o.Indexer.Unset()
}

// GetReleaseGroup returns the ReleaseGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetReleaseGroup() string {
	if o == nil || IsNil(o.ReleaseGroup.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseGroup.Get()
}

// GetReleaseGroupOk returns a tuple with the ReleaseGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetReleaseGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseGroup.Get(), o.ReleaseGroup.IsSet()
}

// HasReleaseGroup returns a boolean if a field has been set.
func (o *ReleaseResource) HasReleaseGroup() bool {
	if o != nil && o.ReleaseGroup.IsSet() {
		return true
	}

	return false
}

// SetReleaseGroup gets a reference to the given NullableString and assigns it to the ReleaseGroup field.
func (o *ReleaseResource) SetReleaseGroup(v string) {
	o.ReleaseGroup.Set(&v)
}
// SetReleaseGroupNil sets the value for ReleaseGroup to be an explicit nil
func (o *ReleaseResource) SetReleaseGroupNil() {
	o.ReleaseGroup.Set(nil)
}

// UnsetReleaseGroup ensures that no value is present for ReleaseGroup, not even an explicit nil
func (o *ReleaseResource) UnsetReleaseGroup() {
	o.ReleaseGroup.Unset()
}

// GetSubGroup returns the SubGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetSubGroup() string {
	if o == nil || IsNil(o.SubGroup.Get()) {
		var ret string
		return ret
	}
	return *o.SubGroup.Get()
}

// GetSubGroupOk returns a tuple with the SubGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetSubGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubGroup.Get(), o.SubGroup.IsSet()
}

// HasSubGroup returns a boolean if a field has been set.
func (o *ReleaseResource) HasSubGroup() bool {
	if o != nil && o.SubGroup.IsSet() {
		return true
	}

	return false
}

// SetSubGroup gets a reference to the given NullableString and assigns it to the SubGroup field.
func (o *ReleaseResource) SetSubGroup(v string) {
	o.SubGroup.Set(&v)
}
// SetSubGroupNil sets the value for SubGroup to be an explicit nil
func (o *ReleaseResource) SetSubGroupNil() {
	o.SubGroup.Set(nil)
}

// UnsetSubGroup ensures that no value is present for SubGroup, not even an explicit nil
func (o *ReleaseResource) UnsetSubGroup() {
	o.SubGroup.Unset()
}

// GetReleaseHash returns the ReleaseHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetReleaseHash() string {
	if o == nil || IsNil(o.ReleaseHash.Get()) {
		var ret string
		return ret
	}
	return *o.ReleaseHash.Get()
}

// GetReleaseHashOk returns a tuple with the ReleaseHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetReleaseHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseHash.Get(), o.ReleaseHash.IsSet()
}

// HasReleaseHash returns a boolean if a field has been set.
func (o *ReleaseResource) HasReleaseHash() bool {
	if o != nil && o.ReleaseHash.IsSet() {
		return true
	}

	return false
}

// SetReleaseHash gets a reference to the given NullableString and assigns it to the ReleaseHash field.
func (o *ReleaseResource) SetReleaseHash(v string) {
	o.ReleaseHash.Set(&v)
}
// SetReleaseHashNil sets the value for ReleaseHash to be an explicit nil
func (o *ReleaseResource) SetReleaseHashNil() {
	o.ReleaseHash.Set(nil)
}

// UnsetReleaseHash ensures that no value is present for ReleaseHash, not even an explicit nil
func (o *ReleaseResource) UnsetReleaseHash() {
	o.ReleaseHash.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseResource) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ReleaseResource) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ReleaseResource) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ReleaseResource) UnsetTitle() {
	o.Title.Unset()
}

// GetSceneSource returns the SceneSource field value if set, zero value otherwise.
func (o *ReleaseResource) GetSceneSource() bool {
	if o == nil || IsNil(o.SceneSource) {
		var ret bool
		return ret
	}
	return *o.SceneSource
}

// GetSceneSourceOk returns a tuple with the SceneSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetSceneSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.SceneSource) {
		return nil, false
	}
	return o.SceneSource, true
}

// HasSceneSource returns a boolean if a field has been set.
func (o *ReleaseResource) HasSceneSource() bool {
	if o != nil && !IsNil(o.SceneSource) {
		return true
	}

	return false
}

// SetSceneSource gets a reference to the given bool and assigns it to the SceneSource field.
func (o *ReleaseResource) SetSceneSource(v bool) {
	o.SceneSource = &v
}

// GetMovieTitles returns the MovieTitles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetMovieTitles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MovieTitles
}

// GetMovieTitlesOk returns a tuple with the MovieTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetMovieTitlesOk() ([]string, bool) {
	if o == nil || IsNil(o.MovieTitles) {
		return nil, false
	}
	return o.MovieTitles, true
}

// HasMovieTitles returns a boolean if a field has been set.
func (o *ReleaseResource) HasMovieTitles() bool {
	if o != nil && !IsNil(o.MovieTitles) {
		return true
	}

	return false
}

// SetMovieTitles gets a reference to the given []string and assigns it to the MovieTitles field.
func (o *ReleaseResource) SetMovieTitles(v []string) {
	o.MovieTitles = v
}

// GetLanguages returns the Languages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetLanguages() []Language {
	if o == nil {
		var ret []Language
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetLanguagesOk() ([]Language, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *ReleaseResource) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []Language and assigns it to the Languages field.
func (o *ReleaseResource) SetLanguages(v []Language) {
	o.Languages = v
}

// GetMappedMovieId returns the MappedMovieId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetMappedMovieId() int32 {
	if o == nil || IsNil(o.MappedMovieId.Get()) {
		var ret int32
		return ret
	}
	return *o.MappedMovieId.Get()
}

// GetMappedMovieIdOk returns a tuple with the MappedMovieId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetMappedMovieIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MappedMovieId.Get(), o.MappedMovieId.IsSet()
}

// HasMappedMovieId returns a boolean if a field has been set.
func (o *ReleaseResource) HasMappedMovieId() bool {
	if o != nil && o.MappedMovieId.IsSet() {
		return true
	}

	return false
}

// SetMappedMovieId gets a reference to the given NullableInt32 and assigns it to the MappedMovieId field.
func (o *ReleaseResource) SetMappedMovieId(v int32) {
	o.MappedMovieId.Set(&v)
}
// SetMappedMovieIdNil sets the value for MappedMovieId to be an explicit nil
func (o *ReleaseResource) SetMappedMovieIdNil() {
	o.MappedMovieId.Set(nil)
}

// UnsetMappedMovieId ensures that no value is present for MappedMovieId, not even an explicit nil
func (o *ReleaseResource) UnsetMappedMovieId() {
	o.MappedMovieId.Unset()
}

// GetApproved returns the Approved field value if set, zero value otherwise.
func (o *ReleaseResource) GetApproved() bool {
	if o == nil || IsNil(o.Approved) {
		var ret bool
		return ret
	}
	return *o.Approved
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetApprovedOk() (*bool, bool) {
	if o == nil || IsNil(o.Approved) {
		return nil, false
	}
	return o.Approved, true
}

// HasApproved returns a boolean if a field has been set.
func (o *ReleaseResource) HasApproved() bool {
	if o != nil && !IsNil(o.Approved) {
		return true
	}

	return false
}

// SetApproved gets a reference to the given bool and assigns it to the Approved field.
func (o *ReleaseResource) SetApproved(v bool) {
	o.Approved = &v
}

// GetTemporarilyRejected returns the TemporarilyRejected field value if set, zero value otherwise.
func (o *ReleaseResource) GetTemporarilyRejected() bool {
	if o == nil || IsNil(o.TemporarilyRejected) {
		var ret bool
		return ret
	}
	return *o.TemporarilyRejected
}

// GetTemporarilyRejectedOk returns a tuple with the TemporarilyRejected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetTemporarilyRejectedOk() (*bool, bool) {
	if o == nil || IsNil(o.TemporarilyRejected) {
		return nil, false
	}
	return o.TemporarilyRejected, true
}

// HasTemporarilyRejected returns a boolean if a field has been set.
func (o *ReleaseResource) HasTemporarilyRejected() bool {
	if o != nil && !IsNil(o.TemporarilyRejected) {
		return true
	}

	return false
}

// SetTemporarilyRejected gets a reference to the given bool and assigns it to the TemporarilyRejected field.
func (o *ReleaseResource) SetTemporarilyRejected(v bool) {
	o.TemporarilyRejected = &v
}

// GetRejected returns the Rejected field value if set, zero value otherwise.
func (o *ReleaseResource) GetRejected() bool {
	if o == nil || IsNil(o.Rejected) {
		var ret bool
		return ret
	}
	return *o.Rejected
}

// GetRejectedOk returns a tuple with the Rejected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetRejectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Rejected) {
		return nil, false
	}
	return o.Rejected, true
}

// HasRejected returns a boolean if a field has been set.
func (o *ReleaseResource) HasRejected() bool {
	if o != nil && !IsNil(o.Rejected) {
		return true
	}

	return false
}

// SetRejected gets a reference to the given bool and assigns it to the Rejected field.
func (o *ReleaseResource) SetRejected(v bool) {
	o.Rejected = &v
}

// GetTmdbId returns the TmdbId field value if set, zero value otherwise.
func (o *ReleaseResource) GetTmdbId() int32 {
	if o == nil || IsNil(o.TmdbId) {
		var ret int32
		return ret
	}
	return *o.TmdbId
}

// GetTmdbIdOk returns a tuple with the TmdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetTmdbIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TmdbId) {
		return nil, false
	}
	return o.TmdbId, true
}

// HasTmdbId returns a boolean if a field has been set.
func (o *ReleaseResource) HasTmdbId() bool {
	if o != nil && !IsNil(o.TmdbId) {
		return true
	}

	return false
}

// SetTmdbId gets a reference to the given int32 and assigns it to the TmdbId field.
func (o *ReleaseResource) SetTmdbId(v int32) {
	o.TmdbId = &v
}

// GetImdbId returns the ImdbId field value if set, zero value otherwise.
func (o *ReleaseResource) GetImdbId() int32 {
	if o == nil || IsNil(o.ImdbId) {
		var ret int32
		return ret
	}
	return *o.ImdbId
}

// GetImdbIdOk returns a tuple with the ImdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetImdbIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ImdbId) {
		return nil, false
	}
	return o.ImdbId, true
}

// HasImdbId returns a boolean if a field has been set.
func (o *ReleaseResource) HasImdbId() bool {
	if o != nil && !IsNil(o.ImdbId) {
		return true
	}

	return false
}

// SetImdbId gets a reference to the given int32 and assigns it to the ImdbId field.
func (o *ReleaseResource) SetImdbId(v int32) {
	o.ImdbId = &v
}

// GetRejections returns the Rejections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetRejections() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Rejections
}

// GetRejectionsOk returns a tuple with the Rejections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetRejectionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Rejections) {
		return nil, false
	}
	return o.Rejections, true
}

// HasRejections returns a boolean if a field has been set.
func (o *ReleaseResource) HasRejections() bool {
	if o != nil && !IsNil(o.Rejections) {
		return true
	}

	return false
}

// SetRejections gets a reference to the given []string and assigns it to the Rejections field.
func (o *ReleaseResource) SetRejections(v []string) {
	o.Rejections = v
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise.
func (o *ReleaseResource) GetPublishDate() time.Time {
	if o == nil || IsNil(o.PublishDate) {
		var ret time.Time
		return ret
	}
	return *o.PublishDate
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetPublishDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishDate) {
		return nil, false
	}
	return o.PublishDate, true
}

// HasPublishDate returns a boolean if a field has been set.
func (o *ReleaseResource) HasPublishDate() bool {
	if o != nil && !IsNil(o.PublishDate) {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given time.Time and assigns it to the PublishDate field.
func (o *ReleaseResource) SetPublishDate(v time.Time) {
	o.PublishDate = &v
}

// GetCommentUrl returns the CommentUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetCommentUrl() string {
	if o == nil || IsNil(o.CommentUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CommentUrl.Get()
}

// GetCommentUrlOk returns a tuple with the CommentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetCommentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommentUrl.Get(), o.CommentUrl.IsSet()
}

// HasCommentUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasCommentUrl() bool {
	if o != nil && o.CommentUrl.IsSet() {
		return true
	}

	return false
}

// SetCommentUrl gets a reference to the given NullableString and assigns it to the CommentUrl field.
func (o *ReleaseResource) SetCommentUrl(v string) {
	o.CommentUrl.Set(&v)
}
// SetCommentUrlNil sets the value for CommentUrl to be an explicit nil
func (o *ReleaseResource) SetCommentUrlNil() {
	o.CommentUrl.Set(nil)
}

// UnsetCommentUrl ensures that no value is present for CommentUrl, not even an explicit nil
func (o *ReleaseResource) UnsetCommentUrl() {
	o.CommentUrl.Unset()
}

// GetDownloadUrl returns the DownloadUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetDownloadUrl() string {
	if o == nil || IsNil(o.DownloadUrl.Get()) {
		var ret string
		return ret
	}
	return *o.DownloadUrl.Get()
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadUrl.Get(), o.DownloadUrl.IsSet()
}

// HasDownloadUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasDownloadUrl() bool {
	if o != nil && o.DownloadUrl.IsSet() {
		return true
	}

	return false
}

// SetDownloadUrl gets a reference to the given NullableString and assigns it to the DownloadUrl field.
func (o *ReleaseResource) SetDownloadUrl(v string) {
	o.DownloadUrl.Set(&v)
}
// SetDownloadUrlNil sets the value for DownloadUrl to be an explicit nil
func (o *ReleaseResource) SetDownloadUrlNil() {
	o.DownloadUrl.Set(nil)
}

// UnsetDownloadUrl ensures that no value is present for DownloadUrl, not even an explicit nil
func (o *ReleaseResource) UnsetDownloadUrl() {
	o.DownloadUrl.Unset()
}

// GetInfoUrl returns the InfoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetInfoUrl() string {
	if o == nil || IsNil(o.InfoUrl.Get()) {
		var ret string
		return ret
	}
	return *o.InfoUrl.Get()
}

// GetInfoUrlOk returns a tuple with the InfoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetInfoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InfoUrl.Get(), o.InfoUrl.IsSet()
}

// HasInfoUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasInfoUrl() bool {
	if o != nil && o.InfoUrl.IsSet() {
		return true
	}

	return false
}

// SetInfoUrl gets a reference to the given NullableString and assigns it to the InfoUrl field.
func (o *ReleaseResource) SetInfoUrl(v string) {
	o.InfoUrl.Set(&v)
}
// SetInfoUrlNil sets the value for InfoUrl to be an explicit nil
func (o *ReleaseResource) SetInfoUrlNil() {
	o.InfoUrl.Set(nil)
}

// UnsetInfoUrl ensures that no value is present for InfoUrl, not even an explicit nil
func (o *ReleaseResource) UnsetInfoUrl() {
	o.InfoUrl.Unset()
}

// GetDownloadAllowed returns the DownloadAllowed field value if set, zero value otherwise.
func (o *ReleaseResource) GetDownloadAllowed() bool {
	if o == nil || IsNil(o.DownloadAllowed) {
		var ret bool
		return ret
	}
	return *o.DownloadAllowed
}

// GetDownloadAllowedOk returns a tuple with the DownloadAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetDownloadAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.DownloadAllowed) {
		return nil, false
	}
	return o.DownloadAllowed, true
}

// HasDownloadAllowed returns a boolean if a field has been set.
func (o *ReleaseResource) HasDownloadAllowed() bool {
	if o != nil && !IsNil(o.DownloadAllowed) {
		return true
	}

	return false
}

// SetDownloadAllowed gets a reference to the given bool and assigns it to the DownloadAllowed field.
func (o *ReleaseResource) SetDownloadAllowed(v bool) {
	o.DownloadAllowed = &v
}

// GetReleaseWeight returns the ReleaseWeight field value if set, zero value otherwise.
func (o *ReleaseResource) GetReleaseWeight() int32 {
	if o == nil || IsNil(o.ReleaseWeight) {
		var ret int32
		return ret
	}
	return *o.ReleaseWeight
}

// GetReleaseWeightOk returns a tuple with the ReleaseWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetReleaseWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.ReleaseWeight) {
		return nil, false
	}
	return o.ReleaseWeight, true
}

// HasReleaseWeight returns a boolean if a field has been set.
func (o *ReleaseResource) HasReleaseWeight() bool {
	if o != nil && !IsNil(o.ReleaseWeight) {
		return true
	}

	return false
}

// SetReleaseWeight gets a reference to the given int32 and assigns it to the ReleaseWeight field.
func (o *ReleaseResource) SetReleaseWeight(v int32) {
	o.ReleaseWeight = &v
}

// GetIndexerFlags returns the IndexerFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetIndexerFlags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IndexerFlags
}

// GetIndexerFlagsOk returns a tuple with the IndexerFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetIndexerFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IndexerFlags) {
		return nil, false
	}
	return o.IndexerFlags, true
}

// HasIndexerFlags returns a boolean if a field has been set.
func (o *ReleaseResource) HasIndexerFlags() bool {
	if o != nil && !IsNil(o.IndexerFlags) {
		return true
	}

	return false
}

// SetIndexerFlags gets a reference to the given []string and assigns it to the IndexerFlags field.
func (o *ReleaseResource) SetIndexerFlags(v []string) {
	o.IndexerFlags = v
}

// GetEdition returns the Edition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetEdition() string {
	if o == nil || IsNil(o.Edition.Get()) {
		var ret string
		return ret
	}
	return *o.Edition.Get()
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetEditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Edition.Get(), o.Edition.IsSet()
}

// HasEdition returns a boolean if a field has been set.
func (o *ReleaseResource) HasEdition() bool {
	if o != nil && o.Edition.IsSet() {
		return true
	}

	return false
}

// SetEdition gets a reference to the given NullableString and assigns it to the Edition field.
func (o *ReleaseResource) SetEdition(v string) {
	o.Edition.Set(&v)
}
// SetEditionNil sets the value for Edition to be an explicit nil
func (o *ReleaseResource) SetEditionNil() {
	o.Edition.Set(nil)
}

// UnsetEdition ensures that no value is present for Edition, not even an explicit nil
func (o *ReleaseResource) UnsetEdition() {
	o.Edition.Unset()
}

// GetMagnetUrl returns the MagnetUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetMagnetUrl() string {
	if o == nil || IsNil(o.MagnetUrl.Get()) {
		var ret string
		return ret
	}
	return *o.MagnetUrl.Get()
}

// GetMagnetUrlOk returns a tuple with the MagnetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetMagnetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MagnetUrl.Get(), o.MagnetUrl.IsSet()
}

// HasMagnetUrl returns a boolean if a field has been set.
func (o *ReleaseResource) HasMagnetUrl() bool {
	if o != nil && o.MagnetUrl.IsSet() {
		return true
	}

	return false
}

// SetMagnetUrl gets a reference to the given NullableString and assigns it to the MagnetUrl field.
func (o *ReleaseResource) SetMagnetUrl(v string) {
	o.MagnetUrl.Set(&v)
}
// SetMagnetUrlNil sets the value for MagnetUrl to be an explicit nil
func (o *ReleaseResource) SetMagnetUrlNil() {
	o.MagnetUrl.Set(nil)
}

// UnsetMagnetUrl ensures that no value is present for MagnetUrl, not even an explicit nil
func (o *ReleaseResource) UnsetMagnetUrl() {
	o.MagnetUrl.Unset()
}

// GetInfoHash returns the InfoHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetInfoHash() string {
	if o == nil || IsNil(o.InfoHash.Get()) {
		var ret string
		return ret
	}
	return *o.InfoHash.Get()
}

// GetInfoHashOk returns a tuple with the InfoHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetInfoHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InfoHash.Get(), o.InfoHash.IsSet()
}

// HasInfoHash returns a boolean if a field has been set.
func (o *ReleaseResource) HasInfoHash() bool {
	if o != nil && o.InfoHash.IsSet() {
		return true
	}

	return false
}

// SetInfoHash gets a reference to the given NullableString and assigns it to the InfoHash field.
func (o *ReleaseResource) SetInfoHash(v string) {
	o.InfoHash.Set(&v)
}
// SetInfoHashNil sets the value for InfoHash to be an explicit nil
func (o *ReleaseResource) SetInfoHashNil() {
	o.InfoHash.Set(nil)
}

// UnsetInfoHash ensures that no value is present for InfoHash, not even an explicit nil
func (o *ReleaseResource) UnsetInfoHash() {
	o.InfoHash.Unset()
}

// GetSeeders returns the Seeders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetSeeders() int32 {
	if o == nil || IsNil(o.Seeders.Get()) {
		var ret int32
		return ret
	}
	return *o.Seeders.Get()
}

// GetSeedersOk returns a tuple with the Seeders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetSeedersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Seeders.Get(), o.Seeders.IsSet()
}

// HasSeeders returns a boolean if a field has been set.
func (o *ReleaseResource) HasSeeders() bool {
	if o != nil && o.Seeders.IsSet() {
		return true
	}

	return false
}

// SetSeeders gets a reference to the given NullableInt32 and assigns it to the Seeders field.
func (o *ReleaseResource) SetSeeders(v int32) {
	o.Seeders.Set(&v)
}
// SetSeedersNil sets the value for Seeders to be an explicit nil
func (o *ReleaseResource) SetSeedersNil() {
	o.Seeders.Set(nil)
}

// UnsetSeeders ensures that no value is present for Seeders, not even an explicit nil
func (o *ReleaseResource) UnsetSeeders() {
	o.Seeders.Unset()
}

// GetLeechers returns the Leechers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetLeechers() int32 {
	if o == nil || IsNil(o.Leechers.Get()) {
		var ret int32
		return ret
	}
	return *o.Leechers.Get()
}

// GetLeechersOk returns a tuple with the Leechers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetLeechersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Leechers.Get(), o.Leechers.IsSet()
}

// HasLeechers returns a boolean if a field has been set.
func (o *ReleaseResource) HasLeechers() bool {
	if o != nil && o.Leechers.IsSet() {
		return true
	}

	return false
}

// SetLeechers gets a reference to the given NullableInt32 and assigns it to the Leechers field.
func (o *ReleaseResource) SetLeechers(v int32) {
	o.Leechers.Set(&v)
}
// SetLeechersNil sets the value for Leechers to be an explicit nil
func (o *ReleaseResource) SetLeechersNil() {
	o.Leechers.Set(nil)
}

// UnsetLeechers ensures that no value is present for Leechers, not even an explicit nil
func (o *ReleaseResource) UnsetLeechers() {
	o.Leechers.Unset()
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ReleaseResource) GetProtocol() DownloadProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret DownloadProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseResource) GetProtocolOk() (*DownloadProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ReleaseResource) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given DownloadProtocol and assigns it to the Protocol field.
func (o *ReleaseResource) SetProtocol(v DownloadProtocol) {
	o.Protocol = &v
}

// GetMovieId returns the MovieId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetMovieId() int32 {
	if o == nil || IsNil(o.MovieId.Get()) {
		var ret int32
		return ret
	}
	return *o.MovieId.Get()
}

// GetMovieIdOk returns a tuple with the MovieId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetMovieIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MovieId.Get(), o.MovieId.IsSet()
}

// HasMovieId returns a boolean if a field has been set.
func (o *ReleaseResource) HasMovieId() bool {
	if o != nil && o.MovieId.IsSet() {
		return true
	}

	return false
}

// SetMovieId gets a reference to the given NullableInt32 and assigns it to the MovieId field.
func (o *ReleaseResource) SetMovieId(v int32) {
	o.MovieId.Set(&v)
}
// SetMovieIdNil sets the value for MovieId to be an explicit nil
func (o *ReleaseResource) SetMovieIdNil() {
	o.MovieId.Set(nil)
}

// UnsetMovieId ensures that no value is present for MovieId, not even an explicit nil
func (o *ReleaseResource) UnsetMovieId() {
	o.MovieId.Unset()
}

// GetDownloadClientId returns the DownloadClientId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetDownloadClientId() int32 {
	if o == nil || IsNil(o.DownloadClientId.Get()) {
		var ret int32
		return ret
	}
	return *o.DownloadClientId.Get()
}

// GetDownloadClientIdOk returns a tuple with the DownloadClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetDownloadClientIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadClientId.Get(), o.DownloadClientId.IsSet()
}

// HasDownloadClientId returns a boolean if a field has been set.
func (o *ReleaseResource) HasDownloadClientId() bool {
	if o != nil && o.DownloadClientId.IsSet() {
		return true
	}

	return false
}

// SetDownloadClientId gets a reference to the given NullableInt32 and assigns it to the DownloadClientId field.
func (o *ReleaseResource) SetDownloadClientId(v int32) {
	o.DownloadClientId.Set(&v)
}
// SetDownloadClientIdNil sets the value for DownloadClientId to be an explicit nil
func (o *ReleaseResource) SetDownloadClientIdNil() {
	o.DownloadClientId.Set(nil)
}

// UnsetDownloadClientId ensures that no value is present for DownloadClientId, not even an explicit nil
func (o *ReleaseResource) UnsetDownloadClientId() {
	o.DownloadClientId.Unset()
}

// GetDownloadClient returns the DownloadClient field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetDownloadClient() string {
	if o == nil || IsNil(o.DownloadClient.Get()) {
		var ret string
		return ret
	}
	return *o.DownloadClient.Get()
}

// GetDownloadClientOk returns a tuple with the DownloadClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetDownloadClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadClient.Get(), o.DownloadClient.IsSet()
}

// HasDownloadClient returns a boolean if a field has been set.
func (o *ReleaseResource) HasDownloadClient() bool {
	if o != nil && o.DownloadClient.IsSet() {
		return true
	}

	return false
}

// SetDownloadClient gets a reference to the given NullableString and assigns it to the DownloadClient field.
func (o *ReleaseResource) SetDownloadClient(v string) {
	o.DownloadClient.Set(&v)
}
// SetDownloadClientNil sets the value for DownloadClient to be an explicit nil
func (o *ReleaseResource) SetDownloadClientNil() {
	o.DownloadClient.Set(nil)
}

// UnsetDownloadClient ensures that no value is present for DownloadClient, not even an explicit nil
func (o *ReleaseResource) UnsetDownloadClient() {
	o.DownloadClient.Unset()
}

// GetShouldOverride returns the ShouldOverride field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReleaseResource) GetShouldOverride() bool {
	if o == nil || IsNil(o.ShouldOverride.Get()) {
		var ret bool
		return ret
	}
	return *o.ShouldOverride.Get()
}

// GetShouldOverrideOk returns a tuple with the ShouldOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReleaseResource) GetShouldOverrideOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShouldOverride.Get(), o.ShouldOverride.IsSet()
}

// HasShouldOverride returns a boolean if a field has been set.
func (o *ReleaseResource) HasShouldOverride() bool {
	if o != nil && o.ShouldOverride.IsSet() {
		return true
	}

	return false
}

// SetShouldOverride gets a reference to the given NullableBool and assigns it to the ShouldOverride field.
func (o *ReleaseResource) SetShouldOverride(v bool) {
	o.ShouldOverride.Set(&v)
}
// SetShouldOverrideNil sets the value for ShouldOverride to be an explicit nil
func (o *ReleaseResource) SetShouldOverrideNil() {
	o.ShouldOverride.Set(nil)
}

// UnsetShouldOverride ensures that no value is present for ShouldOverride, not even an explicit nil
func (o *ReleaseResource) UnsetShouldOverride() {
	o.ShouldOverride.Unset()
}

func (o ReleaseResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	if o.CustomFormats != nil {
		toSerialize["customFormats"] = o.CustomFormats
	}
	if !IsNil(o.CustomFormatScore) {
		toSerialize["customFormatScore"] = o.CustomFormatScore
	}
	if !IsNil(o.QualityWeight) {
		toSerialize["qualityWeight"] = o.QualityWeight
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.AgeHours) {
		toSerialize["ageHours"] = o.AgeHours
	}
	if !IsNil(o.AgeMinutes) {
		toSerialize["ageMinutes"] = o.AgeMinutes
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.IndexerId) {
		toSerialize["indexerId"] = o.IndexerId
	}
	if o.Indexer.IsSet() {
		toSerialize["indexer"] = o.Indexer.Get()
	}
	if o.ReleaseGroup.IsSet() {
		toSerialize["releaseGroup"] = o.ReleaseGroup.Get()
	}
	if o.SubGroup.IsSet() {
		toSerialize["subGroup"] = o.SubGroup.Get()
	}
	if o.ReleaseHash.IsSet() {
		toSerialize["releaseHash"] = o.ReleaseHash.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if !IsNil(o.SceneSource) {
		toSerialize["sceneSource"] = o.SceneSource
	}
	if o.MovieTitles != nil {
		toSerialize["movieTitles"] = o.MovieTitles
	}
	if o.Languages != nil {
		toSerialize["languages"] = o.Languages
	}
	if o.MappedMovieId.IsSet() {
		toSerialize["mappedMovieId"] = o.MappedMovieId.Get()
	}
	if !IsNil(o.Approved) {
		toSerialize["approved"] = o.Approved
	}
	if !IsNil(o.TemporarilyRejected) {
		toSerialize["temporarilyRejected"] = o.TemporarilyRejected
	}
	if !IsNil(o.Rejected) {
		toSerialize["rejected"] = o.Rejected
	}
	if !IsNil(o.TmdbId) {
		toSerialize["tmdbId"] = o.TmdbId
	}
	if !IsNil(o.ImdbId) {
		toSerialize["imdbId"] = o.ImdbId
	}
	if o.Rejections != nil {
		toSerialize["rejections"] = o.Rejections
	}
	if !IsNil(o.PublishDate) {
		toSerialize["publishDate"] = o.PublishDate
	}
	if o.CommentUrl.IsSet() {
		toSerialize["commentUrl"] = o.CommentUrl.Get()
	}
	if o.DownloadUrl.IsSet() {
		toSerialize["downloadUrl"] = o.DownloadUrl.Get()
	}
	if o.InfoUrl.IsSet() {
		toSerialize["infoUrl"] = o.InfoUrl.Get()
	}
	if !IsNil(o.DownloadAllowed) {
		toSerialize["downloadAllowed"] = o.DownloadAllowed
	}
	if !IsNil(o.ReleaseWeight) {
		toSerialize["releaseWeight"] = o.ReleaseWeight
	}
	if o.IndexerFlags != nil {
		toSerialize["indexerFlags"] = o.IndexerFlags
	}
	if o.Edition.IsSet() {
		toSerialize["edition"] = o.Edition.Get()
	}
	if o.MagnetUrl.IsSet() {
		toSerialize["magnetUrl"] = o.MagnetUrl.Get()
	}
	if o.InfoHash.IsSet() {
		toSerialize["infoHash"] = o.InfoHash.Get()
	}
	if o.Seeders.IsSet() {
		toSerialize["seeders"] = o.Seeders.Get()
	}
	if o.Leechers.IsSet() {
		toSerialize["leechers"] = o.Leechers.Get()
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if o.MovieId.IsSet() {
		toSerialize["movieId"] = o.MovieId.Get()
	}
	if o.DownloadClientId.IsSet() {
		toSerialize["downloadClientId"] = o.DownloadClientId.Get()
	}
	if o.DownloadClient.IsSet() {
		toSerialize["downloadClient"] = o.DownloadClient.Get()
	}
	if o.ShouldOverride.IsSet() {
		toSerialize["shouldOverride"] = o.ShouldOverride.Get()
	}
	return toSerialize, nil
}

type NullableReleaseResource struct {
	value *ReleaseResource
	isSet bool
}

func (v NullableReleaseResource) Get() *ReleaseResource {
	return v.value
}

func (v *NullableReleaseResource) Set(val *ReleaseResource) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseResource) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseResource(val *ReleaseResource) *NullableReleaseResource {
	return &NullableReleaseResource{value: val, isSet: true}
}

func (v NullableReleaseResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


