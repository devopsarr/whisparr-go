/*
Whisparr

Whisparr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
)

// MovieCollection struct for MovieCollection
type MovieCollection struct {
	Name NullableString `json:"name,omitempty"`
	TmdbId *int32 `json:"tmdbId,omitempty"`
	Images []*MediaCover `json:"images,omitempty"`
}

// NewMovieCollection instantiates a new MovieCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovieCollection() *MovieCollection {
	this := MovieCollection{}
	return &this
}

// NewMovieCollectionWithDefaults instantiates a new MovieCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieCollectionWithDefaults() *MovieCollection {
	this := MovieCollection{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetName() string {
	if o == nil || isNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MovieCollection) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MovieCollection) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MovieCollection) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MovieCollection) UnsetName() {
	o.Name.Unset()
}

// GetTmdbId returns the TmdbId field value if set, zero value otherwise.
func (o *MovieCollection) GetTmdbId() int32 {
	if o == nil || isNil(o.TmdbId) {
		var ret int32
		return ret
	}
	return *o.TmdbId
}

// GetTmdbIdOk returns a tuple with the TmdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetTmdbIdOk() (*int32, bool) {
	if o == nil || isNil(o.TmdbId) {
    return nil, false
	}
	return o.TmdbId, true
}

// HasTmdbId returns a boolean if a field has been set.
func (o *MovieCollection) HasTmdbId() bool {
	if o != nil && !isNil(o.TmdbId) {
		return true
	}

	return false
}

// SetTmdbId gets a reference to the given int32 and assigns it to the TmdbId field.
func (o *MovieCollection) SetTmdbId(v int32) {
	o.TmdbId = &v
}

// GetImages returns the Images field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetImages() []*MediaCover {
	if o == nil {
		var ret []*MediaCover
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetImagesOk() ([]*MediaCover, bool) {
	if o == nil || isNil(o.Images) {
    return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *MovieCollection) HasImages() bool {
	if o != nil && isNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []MediaCover and assigns it to the Images field.
func (o *MovieCollection) SetImages(v []*MediaCover) {
	o.Images = v
}

func (o MovieCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !isNil(o.TmdbId) {
		toSerialize["tmdbId"] = o.TmdbId
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	return json.Marshal(toSerialize)
}

type NullableMovieCollection struct {
	value *MovieCollection
	isSet bool
}

func (v NullableMovieCollection) Get() *MovieCollection {
	return v.value
}

func (v *NullableMovieCollection) Set(val *MovieCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieCollection(val *MovieCollection) *NullableMovieCollection {
	return &NullableMovieCollection{value: val, isSet: true}
}

func (v NullableMovieCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


