/*
Radarr

Radarr API docs

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package whisparr

import (
	"encoding/json"
	"time"
)

// MovieCollection struct for MovieCollection
type MovieCollection struct {
	Id *int32 `json:"id,omitempty"`
	Title NullableString `json:"title,omitempty"`
	CleanTitle NullableString `json:"cleanTitle,omitempty"`
	SortTitle NullableString `json:"sortTitle,omitempty"`
	TmdbId *int32 `json:"tmdbId,omitempty"`
	Overview NullableString `json:"overview,omitempty"`
	Monitored *bool `json:"monitored,omitempty"`
	QualityProfileId *int32 `json:"qualityProfileId,omitempty"`
	RootFolderPath NullableString `json:"rootFolderPath,omitempty"`
	SearchOnAdd *bool `json:"searchOnAdd,omitempty"`
	MinimumAvailability *MovieStatusType `json:"minimumAvailability,omitempty"`
	LastInfoSync NullableTime `json:"lastInfoSync,omitempty"`
	Images []*MediaCover `json:"images,omitempty"`
	Added *time.Time `json:"added,omitempty"`
	Movies []*MovieMetadata `json:"movies,omitempty"`
	Tags []*int32 `json:"tags,omitempty"`
}

// NewMovieCollection instantiates a new MovieCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovieCollection() *MovieCollection {
	this := MovieCollection{}
	return &this
}

// NewMovieCollectionWithDefaults instantiates a new MovieCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieCollectionWithDefaults() *MovieCollection {
	this := MovieCollection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MovieCollection) GetId() int32 {
	if o == nil || isNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetIdOk() (*int32, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MovieCollection) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MovieCollection) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetTitle() string {
	if o == nil || isNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *MovieCollection) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *MovieCollection) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *MovieCollection) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *MovieCollection) UnsetTitle() {
	o.Title.Unset()
}

// GetCleanTitle returns the CleanTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetCleanTitle() string {
	if o == nil || isNil(o.CleanTitle.Get()) {
		var ret string
		return ret
	}
	return *o.CleanTitle.Get()
}

// GetCleanTitleOk returns a tuple with the CleanTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetCleanTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CleanTitle.Get(), o.CleanTitle.IsSet()
}

// HasCleanTitle returns a boolean if a field has been set.
func (o *MovieCollection) HasCleanTitle() bool {
	if o != nil && o.CleanTitle.IsSet() {
		return true
	}

	return false
}

// SetCleanTitle gets a reference to the given NullableString and assigns it to the CleanTitle field.
func (o *MovieCollection) SetCleanTitle(v string) {
	o.CleanTitle.Set(&v)
}
// SetCleanTitleNil sets the value for CleanTitle to be an explicit nil
func (o *MovieCollection) SetCleanTitleNil() {
	o.CleanTitle.Set(nil)
}

// UnsetCleanTitle ensures that no value is present for CleanTitle, not even an explicit nil
func (o *MovieCollection) UnsetCleanTitle() {
	o.CleanTitle.Unset()
}

// GetSortTitle returns the SortTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetSortTitle() string {
	if o == nil || isNil(o.SortTitle.Get()) {
		var ret string
		return ret
	}
	return *o.SortTitle.Get()
}

// GetSortTitleOk returns a tuple with the SortTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetSortTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.SortTitle.Get(), o.SortTitle.IsSet()
}

// HasSortTitle returns a boolean if a field has been set.
func (o *MovieCollection) HasSortTitle() bool {
	if o != nil && o.SortTitle.IsSet() {
		return true
	}

	return false
}

// SetSortTitle gets a reference to the given NullableString and assigns it to the SortTitle field.
func (o *MovieCollection) SetSortTitle(v string) {
	o.SortTitle.Set(&v)
}
// SetSortTitleNil sets the value for SortTitle to be an explicit nil
func (o *MovieCollection) SetSortTitleNil() {
	o.SortTitle.Set(nil)
}

// UnsetSortTitle ensures that no value is present for SortTitle, not even an explicit nil
func (o *MovieCollection) UnsetSortTitle() {
	o.SortTitle.Unset()
}

// GetTmdbId returns the TmdbId field value if set, zero value otherwise.
func (o *MovieCollection) GetTmdbId() int32 {
	if o == nil || isNil(o.TmdbId) {
		var ret int32
		return ret
	}
	return *o.TmdbId
}

// GetTmdbIdOk returns a tuple with the TmdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetTmdbIdOk() (*int32, bool) {
	if o == nil || isNil(o.TmdbId) {
    return nil, false
	}
	return o.TmdbId, true
}

// HasTmdbId returns a boolean if a field has been set.
func (o *MovieCollection) HasTmdbId() bool {
	if o != nil && !isNil(o.TmdbId) {
		return true
	}

	return false
}

// SetTmdbId gets a reference to the given int32 and assigns it to the TmdbId field.
func (o *MovieCollection) SetTmdbId(v int32) {
	o.TmdbId = &v
}

// GetOverview returns the Overview field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetOverview() string {
	if o == nil || isNil(o.Overview.Get()) {
		var ret string
		return ret
	}
	return *o.Overview.Get()
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetOverviewOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Overview.Get(), o.Overview.IsSet()
}

// HasOverview returns a boolean if a field has been set.
func (o *MovieCollection) HasOverview() bool {
	if o != nil && o.Overview.IsSet() {
		return true
	}

	return false
}

// SetOverview gets a reference to the given NullableString and assigns it to the Overview field.
func (o *MovieCollection) SetOverview(v string) {
	o.Overview.Set(&v)
}
// SetOverviewNil sets the value for Overview to be an explicit nil
func (o *MovieCollection) SetOverviewNil() {
	o.Overview.Set(nil)
}

// UnsetOverview ensures that no value is present for Overview, not even an explicit nil
func (o *MovieCollection) UnsetOverview() {
	o.Overview.Unset()
}

// GetMonitored returns the Monitored field value if set, zero value otherwise.
func (o *MovieCollection) GetMonitored() bool {
	if o == nil || isNil(o.Monitored) {
		var ret bool
		return ret
	}
	return *o.Monitored
}

// GetMonitoredOk returns a tuple with the Monitored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetMonitoredOk() (*bool, bool) {
	if o == nil || isNil(o.Monitored) {
    return nil, false
	}
	return o.Monitored, true
}

// HasMonitored returns a boolean if a field has been set.
func (o *MovieCollection) HasMonitored() bool {
	if o != nil && !isNil(o.Monitored) {
		return true
	}

	return false
}

// SetMonitored gets a reference to the given bool and assigns it to the Monitored field.
func (o *MovieCollection) SetMonitored(v bool) {
	o.Monitored = &v
}

// GetQualityProfileId returns the QualityProfileId field value if set, zero value otherwise.
func (o *MovieCollection) GetQualityProfileId() int32 {
	if o == nil || isNil(o.QualityProfileId) {
		var ret int32
		return ret
	}
	return *o.QualityProfileId
}

// GetQualityProfileIdOk returns a tuple with the QualityProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetQualityProfileIdOk() (*int32, bool) {
	if o == nil || isNil(o.QualityProfileId) {
    return nil, false
	}
	return o.QualityProfileId, true
}

// HasQualityProfileId returns a boolean if a field has been set.
func (o *MovieCollection) HasQualityProfileId() bool {
	if o != nil && !isNil(o.QualityProfileId) {
		return true
	}

	return false
}

// SetQualityProfileId gets a reference to the given int32 and assigns it to the QualityProfileId field.
func (o *MovieCollection) SetQualityProfileId(v int32) {
	o.QualityProfileId = &v
}

// GetRootFolderPath returns the RootFolderPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetRootFolderPath() string {
	if o == nil || isNil(o.RootFolderPath.Get()) {
		var ret string
		return ret
	}
	return *o.RootFolderPath.Get()
}

// GetRootFolderPathOk returns a tuple with the RootFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetRootFolderPathOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RootFolderPath.Get(), o.RootFolderPath.IsSet()
}

// HasRootFolderPath returns a boolean if a field has been set.
func (o *MovieCollection) HasRootFolderPath() bool {
	if o != nil && o.RootFolderPath.IsSet() {
		return true
	}

	return false
}

// SetRootFolderPath gets a reference to the given NullableString and assigns it to the RootFolderPath field.
func (o *MovieCollection) SetRootFolderPath(v string) {
	o.RootFolderPath.Set(&v)
}
// SetRootFolderPathNil sets the value for RootFolderPath to be an explicit nil
func (o *MovieCollection) SetRootFolderPathNil() {
	o.RootFolderPath.Set(nil)
}

// UnsetRootFolderPath ensures that no value is present for RootFolderPath, not even an explicit nil
func (o *MovieCollection) UnsetRootFolderPath() {
	o.RootFolderPath.Unset()
}

// GetSearchOnAdd returns the SearchOnAdd field value if set, zero value otherwise.
func (o *MovieCollection) GetSearchOnAdd() bool {
	if o == nil || isNil(o.SearchOnAdd) {
		var ret bool
		return ret
	}
	return *o.SearchOnAdd
}

// GetSearchOnAddOk returns a tuple with the SearchOnAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetSearchOnAddOk() (*bool, bool) {
	if o == nil || isNil(o.SearchOnAdd) {
    return nil, false
	}
	return o.SearchOnAdd, true
}

// HasSearchOnAdd returns a boolean if a field has been set.
func (o *MovieCollection) HasSearchOnAdd() bool {
	if o != nil && !isNil(o.SearchOnAdd) {
		return true
	}

	return false
}

// SetSearchOnAdd gets a reference to the given bool and assigns it to the SearchOnAdd field.
func (o *MovieCollection) SetSearchOnAdd(v bool) {
	o.SearchOnAdd = &v
}

// GetMinimumAvailability returns the MinimumAvailability field value if set, zero value otherwise.
func (o *MovieCollection) GetMinimumAvailability() MovieStatusType {
	if o == nil || isNil(o.MinimumAvailability) {
		var ret MovieStatusType
		return ret
	}
	return *o.MinimumAvailability
}

// GetMinimumAvailabilityOk returns a tuple with the MinimumAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetMinimumAvailabilityOk() (*MovieStatusType, bool) {
	if o == nil || isNil(o.MinimumAvailability) {
    return nil, false
	}
	return o.MinimumAvailability, true
}

// HasMinimumAvailability returns a boolean if a field has been set.
func (o *MovieCollection) HasMinimumAvailability() bool {
	if o != nil && !isNil(o.MinimumAvailability) {
		return true
	}

	return false
}

// SetMinimumAvailability gets a reference to the given MovieStatusType and assigns it to the MinimumAvailability field.
func (o *MovieCollection) SetMinimumAvailability(v MovieStatusType) {
	o.MinimumAvailability = &v
}

// GetLastInfoSync returns the LastInfoSync field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetLastInfoSync() time.Time {
	if o == nil || isNil(o.LastInfoSync.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastInfoSync.Get()
}

// GetLastInfoSyncOk returns a tuple with the LastInfoSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetLastInfoSyncOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.LastInfoSync.Get(), o.LastInfoSync.IsSet()
}

// HasLastInfoSync returns a boolean if a field has been set.
func (o *MovieCollection) HasLastInfoSync() bool {
	if o != nil && o.LastInfoSync.IsSet() {
		return true
	}

	return false
}

// SetLastInfoSync gets a reference to the given NullableTime and assigns it to the LastInfoSync field.
func (o *MovieCollection) SetLastInfoSync(v time.Time) {
	o.LastInfoSync.Set(&v)
}
// SetLastInfoSyncNil sets the value for LastInfoSync to be an explicit nil
func (o *MovieCollection) SetLastInfoSyncNil() {
	o.LastInfoSync.Set(nil)
}

// UnsetLastInfoSync ensures that no value is present for LastInfoSync, not even an explicit nil
func (o *MovieCollection) UnsetLastInfoSync() {
	o.LastInfoSync.Unset()
}

// GetImages returns the Images field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetImages() []*MediaCover {
	if o == nil {
		var ret []*MediaCover
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetImagesOk() ([]*MediaCover, bool) {
	if o == nil || isNil(o.Images) {
    return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *MovieCollection) HasImages() bool {
	if o != nil && isNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []MediaCover and assigns it to the Images field.
func (o *MovieCollection) SetImages(v []*MediaCover) {
	o.Images = v
}

// GetAdded returns the Added field value if set, zero value otherwise.
func (o *MovieCollection) GetAdded() time.Time {
	if o == nil || isNil(o.Added) {
		var ret time.Time
		return ret
	}
	return *o.Added
}

// GetAddedOk returns a tuple with the Added field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MovieCollection) GetAddedOk() (*time.Time, bool) {
	if o == nil || isNil(o.Added) {
    return nil, false
	}
	return o.Added, true
}

// HasAdded returns a boolean if a field has been set.
func (o *MovieCollection) HasAdded() bool {
	if o != nil && !isNil(o.Added) {
		return true
	}

	return false
}

// SetAdded gets a reference to the given time.Time and assigns it to the Added field.
func (o *MovieCollection) SetAdded(v time.Time) {
	o.Added = &v
}

// GetMovies returns the Movies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetMovies() []*MovieMetadata {
	if o == nil {
		var ret []*MovieMetadata
		return ret
	}
	return o.Movies
}

// GetMoviesOk returns a tuple with the Movies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetMoviesOk() ([]*MovieMetadata, bool) {
	if o == nil || isNil(o.Movies) {
    return nil, false
	}
	return o.Movies, true
}

// HasMovies returns a boolean if a field has been set.
func (o *MovieCollection) HasMovies() bool {
	if o != nil && isNil(o.Movies) {
		return true
	}

	return false
}

// SetMovies gets a reference to the given []MovieMetadata and assigns it to the Movies field.
func (o *MovieCollection) SetMovies(v []*MovieMetadata) {
	o.Movies = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MovieCollection) GetTags() []*int32 {
	if o == nil {
		var ret []*int32
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MovieCollection) GetTagsOk() ([]*int32, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MovieCollection) HasTags() bool {
	if o != nil && isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []int32 and assigns it to the Tags field.
func (o *MovieCollection) SetTags(v []*int32) {
	o.Tags = v
}

func (o MovieCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.CleanTitle.IsSet() {
		toSerialize["cleanTitle"] = o.CleanTitle.Get()
	}
	if o.SortTitle.IsSet() {
		toSerialize["sortTitle"] = o.SortTitle.Get()
	}
	if !isNil(o.TmdbId) {
		toSerialize["tmdbId"] = o.TmdbId
	}
	if o.Overview.IsSet() {
		toSerialize["overview"] = o.Overview.Get()
	}
	if !isNil(o.Monitored) {
		toSerialize["monitored"] = o.Monitored
	}
	if !isNil(o.QualityProfileId) {
		toSerialize["qualityProfileId"] = o.QualityProfileId
	}
	if o.RootFolderPath.IsSet() {
		toSerialize["rootFolderPath"] = o.RootFolderPath.Get()
	}
	if !isNil(o.SearchOnAdd) {
		toSerialize["searchOnAdd"] = o.SearchOnAdd
	}
	if !isNil(o.MinimumAvailability) {
		toSerialize["minimumAvailability"] = o.MinimumAvailability
	}
	if o.LastInfoSync.IsSet() {
		toSerialize["lastInfoSync"] = o.LastInfoSync.Get()
	}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	if !isNil(o.Added) {
		toSerialize["added"] = o.Added
	}
	if o.Movies != nil {
		toSerialize["movies"] = o.Movies
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableMovieCollection struct {
	value *MovieCollection
	isSet bool
}

func (v NullableMovieCollection) Get() *MovieCollection {
	return v.value
}

func (v *NullableMovieCollection) Set(val *MovieCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableMovieCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableMovieCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovieCollection(val *MovieCollection) *NullableMovieCollection {
	return &NullableMovieCollection{value: val, isSet: true}
}

func (v NullableMovieCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovieCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


